<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Corleonis (Scala)</title><link>http://swind.code-life.info/</link><description></description><language>en</language><lastBuildDate>Sun, 01 Jun 2014 08:05:57 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>用 Spray 建立一個簡單的 RESTful API Server</title><link>http://swind.code-life.info/posts/build-restful-api-server-by-spray.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://spray.cc/"&gt;Spray&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最初是想要建立一個提供查詢服務的 RESTful API Server，可以讓 Client 的應用程式透過 RESTful API 查詢一些資料。
但是看來看去，用 Play2、Jersey、RESTEasy 等都蠻麻煩的，而且還需要使用 Web container（像 Tomcat、Jetty 等）。
所以才找到這個 Spray，而且又是用 Scala 開發的，實在沒有理由不試試看阿。 XD&lt;/p&gt;
&lt;p&gt;若你連到官網看會發現他分成很多模組，老實說我也沒有詳細研究每個模組的功能。
因為 &lt;a class="reference external" href="http://spray.cc/documentation/spray-can/"&gt;spray-can&lt;/a&gt; 的範例看起來最簡單並且也符合我的需求，所以就直接用他了。&lt;/p&gt;
&lt;p&gt;想瞭解更詳細內容的可以參考 &lt;a class="reference external" href="https://github.com/spray/spray/tree/release-1.0-M2/examples/spray-can/simple-http-server/"&gt;spray-can 範例文件&lt;/a&gt; 與 &lt;a class="reference external" href="http://blog.cloudfoundry.com/2012/05/11/running-standalone-web-applications-on-cloud-foundry/"&gt;Running Standalone Web Applications on Cloud Foundry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/build-restful-api-server-by-spray.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/build-restful-api-server-by-spray.html</guid><pubDate>Tue, 06 Nov 2012 12:11:00 GMT</pubDate></item><item><title>Akka 2.0 筆記(6) - Dispatcher 的設定</title><link>http://swind.code-life.info/posts/akka-2_0-note-6.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;今天早上先簡單了依照昨天畫得架構圖做了一個雛型，整個跑起來功能是以了，但是流程整個悲劇 Orz ...
先是 Exception Handling 做的不夠好，結果就真的是 "Let it Crash" 一直死一直死一直死，好像在玩 D3 的煉獄模式一樣。&lt;/p&gt;
&lt;p&gt;再來是我沒有去設定 Dispatcher 所以 Thread 用了十幾個。如果我沒有看錯的話，依照 Akka &lt;a class="reference external" href="https://github.com/akka/akka/blob/master/akka-actor/src/main/resources/reference.conf"&gt;reference.conf&lt;/a&gt; 的設定，
Default Dispatcher 使用 fork-join-executor，他的預設設定如下&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;#&lt;/span&gt; &lt;span class="nc"&gt;Min&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;parallelism&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="n"&gt;parallelism&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;

  &lt;span class="k"&gt;#&lt;/span&gt; &lt;span class="nc"&gt;Parallelism&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt; &lt;span class="n"&gt;processors&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;parallelism&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;

  &lt;span class="k"&gt;#&lt;/span&gt; &lt;span class="nc"&gt;Max&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;based&lt;/span&gt; &lt;span class="n"&gt;parallelism&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="n"&gt;parallelism&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;很簡單的 parallelism-min 與 parallelism-max 的值代表著 Thread 的上下限，那麼 parallelism_factor 呢？&lt;/p&gt;
&lt;p&gt;他同樣也是限制 Thread 的上限，上限的計算方式為&lt;/p&gt;
&lt;blockquote&gt;
parallelism-factor * 你的處理器核心數&lt;/blockquote&gt;
&lt;p&gt;所以我的四核心桌機使用這個 Dispatcher 最多會開到 12 個 Thread Orz ...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-6.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-6.html</guid><pubDate>Sun, 17 Jun 2012 12:19:00 GMT</pubDate></item><item><title>Akka 2.0 筆記(5) - Scatter Gather</title><link>http://swind.code-life.info/posts/akka-2_0-note-5.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;繼上次完全看不懂的 Dataflow 之後，我還是想要一個 Akka 的 Scatter Gather 實作方式，因此想試著自己實做看看。&lt;/p&gt;
&lt;p&gt;下圖是 &lt;a class="reference external" href="http://www.eaipatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt;  書中的 Scatter-Gather 概念圖。&lt;/p&gt;
&lt;img alt="http://www.eaipatterns.com/img/BroadcastAggregate.gif" src="http://www.eaipatterns.com/img/BroadcastAggregate.gif"&gt;&lt;p&gt;從圖中可以發現，中間對於 Vendor A、B 與 C 進行 Broadcast 的行為跟 Akka 內的 &lt;a class="reference external" href="http://doc.akka.io/docs/akka/2.0/scala/routing.html"&gt;Router&lt;/a&gt; 很像，
所以當我正在思考 Router 是否合適作為這種用途的時候，我想到了 &lt;a class="reference external" href="http://letitcrash.com/"&gt;Let it Crash&lt;/a&gt; 裡面 &lt;a class="reference external" href="http://letitcrash.com/post/23532935686/watch-the-routees"&gt;Watch the Routees&lt;/a&gt; 這篇文章。&lt;/p&gt;
&lt;p&gt;這篇文章裡面他紀錄了在 Akka mailinglist 中回答別人問題時所寫的範例程式。&lt;/p&gt;
&lt;p&gt;整個 use case 是要執行一個 Job，這個 Job 由許多 Tasks 組成，在執行的過程中&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;會將這些 Tasks 透過 router 分派給 worker actors 執行。&lt;/li&gt;
&lt;li&gt;最後收集所有 worker 的執行結果，並且將他們合併之後回傳。&lt;/li&gt;
&lt;li&gt;除此之外， worker 在執行過程中發生錯誤時，應該要進行 retry，在進行幾次 retry 後依然有錯誤時，Worker 就會停止，並且中止整個 Job。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-5.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-5.html</guid><pubDate>Fri, 15 Jun 2012 00:58:00 GMT</pubDate></item><item><title>Akka 2.0 筆記(4) - Dataflow 請不要期待這篇我會提到什麼</title><link>http://swind.code-life.info/posts/akka-2_0-note-4.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;這整篇的原因起於，洗澡的時候想到的，
Akka 的 Future 到底有沒有存在的意義呢？&lt;/p&gt;
&lt;p&gt;因為當一個 Actor 用 reply 或者 sender 回傳結果的時候，其實可以再 receive 不同的型態的 Message 就好了。
而且這樣還不會因為 Await 而需要 block thread，減少 dead lock 的發生。
我之前就幹過很蠢的事情，因為 Actor 把 Thread Pool 裡面的 Thread 用光了，所以他底下幫他工作的 Actor 就取不到 Thread 可以執行，
因此全部 Timeout Orz ...&lt;/p&gt;
&lt;p&gt;目前唯一能想到的用法就是在發出訊息的地方不是一個 Actor 的時候，這時候就沒有 receive 可以接收結果了。
所以需要使用 Future 來等待結果，也就是 Future 應該只被用在需要等待的時候，如果是在一個 Actor 被執行的時候使用 Future。
很容易浪費掉一個 Thread，應該是要另外開一個新的 case class 來專門處理結果才是。&lt;/p&gt;
&lt;p&gt;但是這邊又出現了一個更複雜的問題了，因為我將工作分給不同的 Actor 去執行，必須要等到所有 Actor 都執行完畢，整合所有的結果。
那麼如果是用 receive 我要怎樣才能知道我所有的工作都已經完成了呢？&lt;/p&gt;
&lt;p&gt;簡單來說，我就是需要實做一個  &lt;a class="reference external" href="http://www.eaipatterns.com/BroadcastAggregate.html"&gt;Scatter-Gather&lt;/a&gt; ，才會莫名其妙的看到 Akka 的 Dataflow。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-4.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-4.html</guid><pubDate>Tue, 12 Jun 2012 13:55:00 GMT</pubDate></item><item><title>Akka 2.0 筆記(3) - Future 之實在不是我想要拖稿</title><link>http://swind.code-life.info/posts/akka-2_0-note-3.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;而是我實在是不擅長寫作，過去作文只有 20 分真的不是拿假的。
前一篇的 &lt;strong&gt;開始使用 Future&lt;/strong&gt; 只有介紹一些基本的使用方式而已，然後依照前面的程式碼是絕對跑不起來的 Orz ...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-3.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-3.html</guid><pubDate>Sun, 10 Jun 2012 09:30:00 GMT</pubDate></item><item><title>Akka 2.0 筆記 (2) - 開始使用 Future</title><link>http://swind.code-life.info/posts/akka-2_0-note-2.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;以前再使用 Java Thread 的時候最困擾我的就是 Thread 之間的溝通。
要怎樣讓一個 Thread 去等待另外一個 Thread？要怎樣才能讓工作分配的平均？
最後是靠 BlockingQueue 才讓實作變得簡單一點，
不過想當然問題當然一大堆 ... Orz&lt;/p&gt;
&lt;p&gt;所以想來實驗看看 Akka 的 Future 與 Router 到底是如何使用，與可以做到什麼事情。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-2.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-2.html</guid><pubDate>Fri, 08 Jun 2012 04:18:00 GMT</pubDate></item><item><title>Akka 2.0 筆記 (1)</title><link>http://swind.code-life.info/posts/akka-2_0-note-1.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;因為我的程式還沒有寫完，所以是筆記 (1)，寫的過程應該還會有 2 3 ... 出現 Orz。&lt;/p&gt;
&lt;blockquote&gt;
Akka 2.0 - 要升級了
你的時間的庫存量足夠嗎 ?&lt;/blockquote&gt;
&lt;p&gt;Akka 進入了 2.0 時代，恭喜你如果你是用 1.x 的話，請準備改寫吧 ...
先從幾個方面來看 2.0 的新增事項。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/akka-2_0-note-1.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Akka</category><category>Scala</category><guid>http://swind.code-life.info/posts/akka-2_0-note-1.html</guid><pubDate>Thu, 17 May 2012 10:03:00 GMT</pubDate></item><item><title>實作 EPUBConverter 的筆記</title><link>http://swind.code-life.info/posts/epubconverter-implement-note.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;好吧，我要開始筆記一下這次的實作心得了&lt;/p&gt;
&lt;p&gt;其實在學 Scala 的這一段時間中，我最困擾的就是到底怎樣才是好的 Scala 寫作風格。
因為 Scala 最吸引我的部份就是在於他的語法可以不斷的精鍊再精鍊，最後變成*魔法文字* Orz。
所以要怎樣善用 Scala 的語言特性，卻又不失可讀性，我覺得真的很難。
因此在這次的小工具實作中，我試著摸索 Curry 的用法。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/epubconverter-implement-note.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Scala</category><guid>http://swind.code-life.info/posts/epubconverter-implement-note.html</guid><pubDate>Fri, 11 May 2012 10:19:00 GMT</pubDate></item><item><title>epub格式簡轉繁小工具</title><link>http://swind.code-life.info/posts/epubconverter.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="https://github.com/Swind/EPUBConverter/downloads"&gt;EPUBConverter 0.0.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個版號我覺得也沒有機會到 0.0.2 了，不過還是讓我命名個版號滿足小小的虛榮心好了。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/epubconverter.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Scala</category><guid>http://swind.code-life.info/posts/epubconverter.html</guid><pubDate>Fri, 11 May 2012 08:56:00 GMT</pubDate></item><item><title>Scala ORM 工具筆記-Circumflex與ActiveJDBC</title><link>http://swind.code-life.info/posts/scala-orm-note.html</link><dc:creator>Swind</dc:creator><description>&lt;div class="section" id="circumflex"&gt;
&lt;h2&gt;Circumflex&lt;/h2&gt;
&lt;div class="section" id="prepare"&gt;
&lt;h3&gt;Prepare&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://circumflex.ru/"&gt;Circumflex&lt;/a&gt; 我是使用SBT連到Maven repository去載入他所有的Library。&lt;/p&gt;
&lt;dl class="docutils"&gt;&lt;dt&gt;載入的項目有&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;&lt;li&gt;circumflex-orm-2.1.jar&lt;/li&gt;
&lt;li&gt;circumflex-core-2.1.jar&lt;/li&gt;
&lt;li&gt;commons-io-2.0.1&lt;/li&gt;
&lt;li&gt;circumflex-cache-2.1.jar&lt;/li&gt;
&lt;li&gt;slf4j-api-1.6.1&lt;/li&gt;
&lt;li&gt;ehcache-core-2.4.4&lt;/li&gt;
&lt;li&gt;jta-1.1.jar&lt;/li&gt;
&lt;li&gt;c3p0-0.9.1.1.jar&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Circumflex全部載入約2.3MB左右，比其他LightWeight的Library要大的很多。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-table"&gt;
&lt;h3&gt;Create Table&lt;/h3&gt;
&lt;p&gt;Circumflex的設計，主要是在是產生一個對應的資料物件，例如&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VARCHAR&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;NOT_NULL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DEFAULT&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"'ch'"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TEXT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NOT_NULL&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inverseMany&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;City&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;PRIMARY_KEY&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;其中class與object兩者皆為必要的，但是在object Country的繼承型態宣告，連續繼承了Country與Table。
我覺得這部分會讓人有點困惑為何需要如此處理，但是這還是其次的。&lt;/p&gt;
&lt;p&gt;在建立好資料物件之後，就可以利用此資料物件Create Table。&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;ddl&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DDLUnit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ddl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CREATE&lt;/span&gt;
&lt;span class="n"&gt;ddl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DROP&lt;/span&gt;
&lt;span class="n"&gt;ddl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DROP_CREATE&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;建立Table的部分非常方便。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="association"&gt;
&lt;h3&gt;讓我不會用的Association&lt;/h3&gt;
&lt;p&gt;關聯式資料庫的架構非常常見，不管是One-to-One、One-to-Many等結構，我的小程式也很需要這方面功能的支持。
Circumflex的設定方式是將變數宣告成inverseMany或inverseOne的型態，他目前沒有支援Many-to-Many。&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;City&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Long&lt;/span&gt;, &lt;span class="kt"&gt;City&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"country_code"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TEXT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;REFERENCES&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;ON_DELETE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CASCADE&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;ON_UPDATE&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;NO_ACTION&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Country&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;cities&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inverseMany&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;City&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;inverseMany會回傳一個inverseMany的物件，呼叫inverseMany.get之後可以得到一個seq的物件。這個物件是immutable的
，因此你沒有辦法插入資料。所以我想像中的使用方式是Country與City兩個都是各自去儲存的，
然後可以透過Country.cities()取得所有有關的City，相對的City.country()則可以查詢取得對應的Country。
但是這比較不符合我想要的方式，我還是希望那個Collection是可以讓我CRUD的，並且在儲存Country的時候可以一併更新City。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="activejdbc"&gt;
&lt;h2&gt;ActiveJDBC&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Prepare&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/activejdbc/"&gt;activejdbc&lt;/a&gt; 所需要的Library比較多一點，因此建議使用Maven去匯入，或者使用SBT將會減少很多麻煩。
匯入的方式可以參考 &lt;a class="reference external" href="http://code.google.com/p/activejdbc/wiki/GettingStarted"&gt;Getting Start&lt;/a&gt; 。
我在這邊也簡單列出一下使用activejdbc有匯入的Library&lt;/p&gt;
&lt;dl class="docutils"&gt;&lt;dt&gt;activejdbc 所需要的 Library&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;&lt;li&gt;activejdbc-1.2-SNAPSHOT.jar&lt;/li&gt;
&lt;li&gt;slf4j-api-1.5.10&lt;/li&gt;
&lt;li&gt;javalite-common-1.2-SNAPSHOT.jar&lt;/li&gt;
&lt;li&gt;ehcache-core-2.4.5&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;上面這幾個Library中，以ehcache最大約 9xx KB&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Create Table&lt;/h3&gt;
&lt;p&gt;activejdbc並沒有支援Create Table等動作，因此這些動作需要自己撰寫SQL來處理。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="write-model"&gt;
&lt;h3&gt;Write Model&lt;/h3&gt;
&lt;p&gt;寫Model的時候最主要要注意物件的名稱，如果你的Table名稱是"employees"這種複數名詞，那麼你的Model名稱就應該為"employee"。
activejdbc會自動對應複數名詞的Table與單數名詞的Model。(不知道對於es之類的這種變化他是不是也可以處理)。
當然如果有需要的話，也可以使用**@Table**來指定Table名稱。&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="nd"&gt;@Table&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TABLE_NAME"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;employe&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;P.S 幹悲劇了，由於activejdbc裡面的Model的set有三種傳值方式。&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;namesAndValues&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;attributeNames&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;這種寫法Scala在使用的時候會認為是**ambiguous reference to overloaded definition**
因為當我們使用&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="n"&gt;employe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;的時候，Scala會覺得符合set(Object... namesAndValues)與set(String attribute,Object Value)。
不過我覺得這方面Scala蠻合理的，去查了一下似乎也傾向不會去修改這個。(抱頭 Orz)
如果修改成使用&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;attributeNames&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;就不會有問題了 WTF
另外一個解決方式就是使用setString等指定型態的設定方式，我想這應該是個不錯的解法&lt;/p&gt;
&lt;pre class="code scala literal-block"&gt;
&lt;span class="n"&gt;employe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;放棄activejdbc&lt;/h3&gt;
&lt;p&gt;他還有一個instrumentation的步驟，這個步驟我覺得影響太多了，不適合拿來跟Scala一起合用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>Scala</category><guid>http://swind.code-life.info/posts/scala-orm-note.html</guid><pubDate>Tue, 07 Feb 2012 05:44:00 GMT</pubDate></item></channel></rss>