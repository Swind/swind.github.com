<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Corleonis</title>
    <link>https://swind.github.io/categories/android/index.xml</link>
    <description>Recent content in Android on Corleonis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <atom:link href="https://swind.github.io/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用 ADB 來監控 APP 的 CPU 使用量</title>
      <link>https://swind.github.io/post/android_cpu_usage_by_adb/</link>
      <pubDate>Tue, 26 Sep 2017 17:53:21 +0800</pubDate>
      
      <guid>https://swind.github.io/post/android_cpu_usage_by_adb/</guid>
      <description>&lt;p&gt;其實在 &lt;code&gt;Linux&lt;/code&gt; 上監控 CPU 的方法在 &lt;code&gt;Android&lt;/code&gt; 上面也可以用，並且這些方法在很多人的 Blog 與 StackOverflow 也被討論到爛掉了。
這邊主要是紀錄如何使用 &lt;code&gt;adb&lt;/code&gt; 與 &lt;code&gt;/proc&lt;/code&gt; 取得 &lt;code&gt;Process&lt;/code&gt; 與 &lt;code&gt;Thread&lt;/code&gt; 的 CPU 資訊。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;整體的-cpu-使用量&#34;&gt;整體的 CPU 使用量&lt;/h1&gt;

&lt;p&gt;要取得整個 Device 的 CPU 資訊的話，可以透過 &lt;code&gt;/proc/stat&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用指令 &lt;code&gt;adb shell cat /proc/stat&lt;/code&gt; 會看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1286215 71763 779091 4271301 16007 9 16100 0 0 0
cpu0 560338 33626 409552 2845856 9346 0 12458 0 0 0
cpu1 80441 6912 40265 146206 1396 4 379 0 0 0
cpu2 174491 9981 89521 383939 1992 3 838 0 0 0
cpu3 470945 21244 239753 895300 3273 2 2425 0 0 0
intr 56252464 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11183406 0 0 0 0 0 0 0 0 0 0 0 0 0 165872 1 0 0 0 0 0 2426472 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2184 8 5 0 10 0 0 0 2025880 0 0 0 0 0 0 0 0 0 0 384654 0 0 0 0 5 689 3 2 3 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 2283211 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 91049 1142156 0 0 4891 0 0 0 0 60 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 632514 0 12 0 0 0 0 0 5607578 0 0 0 0 0 0 365 0 0 0 36028 5 0 2027914 2134764 0 0 0 0 0 0 0 0 0 2043721 0 5 0 0 0 0 748 263 0 0 0 1584739 0 0 75 0 0 0 0 0 0 0 0 0 0 0 0 11817 0 0 0 0 0 207 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7067 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 16 0 0 0 0 86 0 0 0 0 0 0 0 0 0 0 0 5062 481 1198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 215 12 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 198100180
btime 1506325560
processes 344110
procs_running 1
procs_blocked 0
softirq 30624059 14285 6147433 22588 1777078 14285 14285 400466 3969871 2347 18261421
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;像密碼表一樣的資訊，不過我們可以只著重在第一行的 &lt;code&gt;cpu&lt;/code&gt; 即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1286215 71763 779091 4271301 16007 9 16100 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每個欄位代表的意思是&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;user&lt;/th&gt;
&lt;th&gt;nice&lt;/th&gt;
&lt;th&gt;system&lt;/th&gt;
&lt;th&gt;idle&lt;/th&gt;
&lt;th&gt;iowait&lt;/th&gt;
&lt;th&gt;irq&lt;/th&gt;
&lt;th&gt;softirq&lt;/th&gt;
&lt;th&gt;stealstolen&lt;/th&gt;
&lt;th&gt;guest&lt;/th&gt;
&lt;th&gt;guest_nice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpu&lt;/td&gt;
&lt;td&gt;1286215&lt;/td&gt;
&lt;td&gt;71763&lt;/td&gt;
&lt;td&gt;779091&lt;/td&gt;
&lt;td&gt;4271301&lt;/td&gt;
&lt;td&gt;16007&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;16100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;這些數字都是從 Device 啟動之後的累計值, 單位是 &lt;code&gt;jiffies&lt;/code&gt;，
因此計算在某段時間內的值的話。
就必須在起始跟結束的時候都呼叫一次 &lt;code&gt;adb shell cat /proc/stat&lt;/code&gt;，
並且把所有得到的數字相減。&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;p&gt;開始的時候取得&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1430106 74780 838424 4391260 16309 9 16780 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結束的時候取得&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1431109 74806 838854 4392567 16313 9 16783 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那麼這段時間總共是 &lt;code&gt;2773 jiffies&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# after - before
(1431109 + 74806 + 838854 + 4392567 + 16313 + 9 + 16783 + 0 + 0 + 0) - (1430106 + 74780 + 838424 + 4391260 + 16309 + 9 + 16780 + 0 + 0 + 0) 
= 2773
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;process-的-cpu-使用率&#34;&gt;Process 的 CPU 使用率&lt;/h1&gt;

&lt;p&gt;有了整體之後，再來就是針對 &lt;code&gt;Process&lt;/code&gt; , 計算 &lt;code&gt;Process&lt;/code&gt; 之前需要先取得 &lt;code&gt;Process&lt;/code&gt; 的 &lt;code&gt;PID&lt;/code&gt;。
最簡單的方法就是使用 &lt;code&gt;ps&lt;/code&gt; 來取得。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell ps | grep {package name}

u0_a174   11458 460   1781352 365668 sys_epoll_ 00000000 S com.android.chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二個 &lt;code&gt;11458&lt;/code&gt; 就是 &lt;code&gt;PID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有了 PID 之後, 就可以透過 &lt;code&gt;/proc/{PID}/stat&lt;/code&gt; 取得 Process 的 CPU 使用時間&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell cat /proc/11458/stat

11458 (mosa.puffinFree) S 460 460 0 0 -1 4194624 13380248 0 334 0 120663 47337 0 0 16 -4 133 0 9367583 1535365120 62981 4294967295 1 1 0 0 0 0 4612 0 38648 4294967295 0 0 17 3 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Process 的資料量明顯的多很多，可以參考 &lt;a href=&#34;http://man7.org/linux/man-pages/man5/proc.5.html&#34;&gt;PROC(5)&lt;/a&gt; 中的 &lt;code&gt;/proc/[pid]/stat&lt;/code&gt; 來取得每個欄位的意思。
這邊我們只要注意第 14 跟第 15 個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (14) utime  %lu
        Amount of time that this process has been scheduled
        in user mode, measured in clock ticks (divide by
        sysconf(_SC_CLK_TCK)).  This includes guest time,
        guest_time (time spent running a virtual CPU, see
        below), so that applications that are not aware of
        the guest time field do not lose that time from
        their calculations.

(15) stime  %lu
        Amount of time that this process has been scheduled
        in kernel mode, measured in clock ticks (divide by
        sysconf(_SC_CLK_TCK)).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將這兩個值相加就是 &lt;code&gt;到目前為止&lt;/code&gt; Process 所使用的 CPU 時間。
所以跟前面一樣，需要在開始與結束各取一次，並且&lt;strong&gt;相減&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;thread&#34;&gt;Thread&lt;/h1&gt;

&lt;p&gt;在 &lt;code&gt;/proc/{PID}/task&lt;/code&gt; 底下會有一堆名稱是數字的資料夾&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell ls /proc/11458/task

10143
11458
11463
11465
11466
11468
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每個數字都是這個 Process 底下 Thread 的 &lt;code&gt;tid&lt;/code&gt;, 在這些資料夾裡面也有一個 &lt;code&gt;stat&lt;/code&gt; 的檔案。
所以跟 Process 一樣只要使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell cat /proc/11458/task/10143/stat

10143 (OkHttp Connecti) S 460 460 0 0 -1 4194368 267 0 0 0 0 1 0 0 20 0 129 0 9491883 1599287296 67669 4294967295 1 1 0 0 0 0 4612 0 38648 4294967295 0 0 -1 3 0 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就會取得跟 Process 一樣格式的內容，我們一樣需要注意 &lt;code&gt;utime&lt;/code&gt; 與 &lt;code&gt;stime&lt;/code&gt; 但是除此之外還需要注意一個部份。
就是第一個欄位的 tid &lt;code&gt;10143&lt;/code&gt; 與 thread name &lt;code&gt;(OkHttp Connecti)&lt;/code&gt;。
由於 thread name 可能會重複，但是 tid 會不相同，所以最好是將 tid 與 thread name 合成一個 key 比較不容易統計錯誤。&lt;/p&gt;

&lt;p&gt;將這兩個值相加就是 &lt;code&gt;到目前為止&lt;/code&gt; Thread 所使用的 CPU 時間。
所以跟前面一樣，需要在開始與結束各取一次，並且&lt;strong&gt;相減&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;cpu-使用率&#34;&gt;CPU 使用率&lt;/h1&gt;

&lt;p&gt;就將前面透過 &lt;code&gt;/proc/stat&lt;/code&gt; 取得的值當分母，去計算 Process 與個 Thread 的百分比就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 adb 來追蹤查看 APP 的網路流量</title>
      <link>https://swind.github.io/post/use-adb-to-track-the-network-statistics/</link>
      <pubDate>Wed, 12 Jul 2017 10:46:29 +0800</pubDate>
      
      <guid>https://swind.github.io/post/use-adb-to-track-the-network-statistics/</guid>
      <description>&lt;h2 id=&#34;使用-proc-底下的資訊&#34;&gt;使用 /proc 底下的資訊&lt;/h2&gt;

&lt;p&gt;雖然 Android 7 之後似乎一般應用程式已經沒有辦法存取 &lt;code&gt;/proc&lt;/code&gt; 底下的東西了。
但是使用 ADB 的話還是沒有問題的。&lt;/p&gt;

&lt;p&gt;這次我們使用的目標是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/proc/uid_stat/{uid}/tcp_rcv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/proc/uid_stat/{uid}/tcp_snd&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;tcp_rcv&lt;/code&gt; 與 &lt;code&gt;tcp_snd&lt;/code&gt; 分別所紀錄的是該 uid 所使用的 &lt;code&gt;TCP&lt;/code&gt; 傳輸量（注意 &lt;code&gt;UDP&lt;/code&gt; 並不包含在內)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;取得-app-的-uid&#34;&gt;取得 APP 的 uid&lt;/h2&gt;

&lt;p&gt;取得 APP 的 uid 比較方便的方式有兩種&lt;/p&gt;

&lt;h3 id=&#34;啟動-app-透過-ps-取得-pid-再從-proc-來查詢-uid&#34;&gt;啟動 APP 透過 ps 取得 pid 再從 /proc 來查詢 uid&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;啟動 APP&lt;/li&gt;
&lt;li&gt;執行 &lt;code&gt;adb shell ps | grep {app 的 package 關鍵字}&lt;/code&gt;，例如 &lt;code&gt;adb shell ps | grep chrome&lt;/code&gt; 就可以查詢到 Chrome 的 &lt;code&gt;pid&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell ps | grep chrome

u0_a96    25910 460   1089096 104992 sys_epoll_ 00000000 S com.android.chrome
u0_a96    25960 460   1011240 65940 sys_epoll_ 00000000 S com.android.chrome:privileged_process0
u0_i1     26047 460   1045356 65916 sys_epoll_ 00000000 S com.android.chrome:sandboxed_process0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我們只要使用只有 &lt;code&gt;package name&lt;/code&gt; 的 &lt;code&gt;pid&lt;/code&gt; 就可以了。以此為例，就是 &lt;code&gt;25910&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;透過 &lt;code&gt;adb shell cat /proc/{pid}/status&lt;/code&gt; 查詢 &lt;code&gt;uid&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell cat /proc/25910/status

 Name:   .android.chrome
State:  S (sleeping)
Tgid:   25910
Pid:    25910
PPid:   460
TracerPid:      0
Uid:    10096   10096   10096   10096
Gid:    10096   10096   10096   10096
FDSize: 256
Groups: 3003 9997 50096
VmPeak:  1590940 kB
VmSize:  1068072 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:    130672 kB
VmRSS:    114316 kB
VmData:   180240 kB
VmStk:      8192 kB
VmExe:        20 kB
VmLib:    107956 kB
VmPTE:       424 kB
VmSwap:        0 kB
Threads:        49
SigQ:   0/11726
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000001204
SigIgn: 0000000000000000
SigCgt: 00000002000094f8
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: fffffff000000000
Cpus_allowed:   f
Cpus_allowed_list:      0-3
voluntary_ctxt_switches:        171855
nonvoluntary_ctxt_switches:     22283
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;從上面 &lt;code&gt;Uid&lt;/code&gt; 欄位可以得知 Chrome 的 &lt;code&gt;uid&lt;/code&gt; 是 &lt;code&gt;10096&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;透過-dumpsys-與-package-name-查詢&#34;&gt;透過 dumpsys 與 package name 查詢&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;adb shell &amp;quot;dumpsys package {package 名稱} | grep userId&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell &amp;quot;dumpsys package com.android.chrome | grep userId&amp;quot;

    userId=10096
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;透過-proc-uid-stat-uid-查詢-tcp-的傳輸量&#34;&gt;透過 &lt;code&gt;/proc/uid_stat/{uid}&lt;/code&gt; 查詢 TCP 的傳輸量&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;透過 TCP 送出的流量 (bytes)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell cat /proc/uid_stat/10096/tcp_snd

11120
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;透過 TCP 接收的流量 (bytes)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell cat /proc/uid_stat/10096/tcp_rcv

597160
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;透過-proc-net-xt-qtaguid-stats-查詢傳輸量&#34;&gt;透過 &lt;code&gt;/proc/net/xt_qtaguid/stats&lt;/code&gt; 查詢傳輸量&lt;/h2&gt;

&lt;p&gt;有些 Device 沒有 &lt;code&gt;uid_stat&lt;/code&gt; (例如 Galaxy S8+) 所以另外一個方法就是使用 &lt;code&gt;xt_qtaguid&lt;/code&gt; 來查詢。
這個方法一樣要使用到 &lt;code&gt;uid&lt;/code&gt;, 指令為&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adb shell cat /proc/net/xt_qtaguid/stats | grep {uid}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; adb shell cat /proc/net/xt_qtaguid/stats | grep 10029

72 tun0 0x0 10229 0 1627251 1728 123455 1525 1627251 1728 0 0 0 0 123455 1525 0 0 0 0
73 tun0 0x0 10229 1 341358394 381688 21708316 286335 341358394 381688 0 0 0 0 21381218 281971 327098 4364 0 0
288 wlan0 0x0 10229 0 387926 4640 506630 4639 387926 4640 0 0 0 0 506630 4639 0 0 0 0
289 wlan0 0x0 10229 1 63445949 170110 13704545 156389 63445949 170110 0 0 0 0 13572037 154582 132508 1807 0 0
488 wlan0 0xffffff0400000000 10229 0 18079 17 1444 14 18079 17 0 0 0 0 1444 14 0 0 0 0
489 wlan0 0xffffff0400000000 10229 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
504 lo 0x0 10229 0 17712 372 12376 238 17712 372 0 0 0 0 12376 238 0 0 0 0
505 lo 0x0 10229 1 297993712 91716 298233535 92271 297993712 91716 0 0 0 0 298233535 92271 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以空白作為分隔，每一欄的數值所代表的意思為&lt;/p&gt;

&lt;p&gt;&lt;code&gt;idx iface acct_tag_hex uid_tag_int cnt_set rx_bytes rx_packets tx_bytes tx_packets rx_tcp_bytes rx_tcp_packets rx_udp_bytes rx_udp_packets rx_other_bytes rx_other_packets tx_t cp_bytes tx_tcp_packets tx_udp_bytes tx_udp_packets tx_other_bytes tx_other_packets&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我們所需要的只有 &lt;code&gt;tx_bytes&lt;/code&gt; 與 &lt;code&gt;rx_bytes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果只有需要 TCP/UDP 的話也可以順便查詢 &lt;code&gt;tx_udp_bytes&lt;/code&gt; 或 &lt;code&gt;tx_tcp_bytes&lt;/code&gt; 與 &lt;code&gt;rx_udp_bytes&lt;/code&gt; 或 &lt;code&gt;rx_tcp_bytes&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以修改一下剛剛的指令，增加 &lt;code&gt;cut&lt;/code&gt; 來取得我所想要的欄位&lt;/p&gt;

&lt;p&gt;&lt;code&gt;adb shell cat /proc/net/xt_qtaguid/stats | grep {uid} | cut -d &amp;quot; &amp;quot; -f 2,3,4,5,6,8&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; adb shell cat /proc/net/xt_qtaguid/stats | grep 10229 | cut -d &amp;quot; &amp;quot; -f 2,3,4,5,6,8

wlan0 0x0 10096 0 0 0
wlan0 0x0 10096 1 15659531 414473
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;iface&lt;/code&gt; 代表所使用的網路界面，例如 &lt;code&gt;tun0&lt;/code&gt; 應該就是 VPN&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acct_tag_hex&lt;/code&gt; 開發人員可以使用 &lt;code&gt;TrafficStats.setThreadStatsTag&lt;/code&gt; 標記某個 Thread，這樣之後就可以在 xt_qtaguid 裡面依照 &lt;code&gt;acct_tag_hex&lt;/code&gt; 來區分是哪個 Thread 所使用的流量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cnt_set&lt;/code&gt; 0 代表 APP 的背景程式， 1 代表 APP 的前景程式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rx_bytes&lt;/code&gt; 代表所接收的 bytes 數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tx_bytes&lt;/code&gt; 代表送出去的 bytes 數&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/12904809/tracking-an-applications-network-statistics-netstats-using-adb&#34;&gt;Tracking an application&amp;rsquo;s network statistics (netstats) using ADB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/FallenHWer/p/3359359.html&#34;&gt;Android 獲得 UID 的三個辦法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.voidcn.com/blog/focusjava/article/p-6152550.html&#34;&gt;Android 流量優化(一): 模塊化流量統計&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>ADB 傳輸格式的筆記</title>
      <link>https://swind.github.io/post/adb/</link>
      <pubDate>Tue, 11 Jul 2017 10:46:29 +0800</pubDate>
      
      <guid>https://swind.github.io/post/adb/</guid>
      <description>&lt;p&gt;緩慢補充中&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;adb-傳輸格式&#34;&gt;ADB 傳輸格式&lt;/h2&gt;

&lt;p&gt;在傳送指令給 &lt;code&gt;ADB Server&lt;/code&gt; 的時候，
需要在開頭使用 4 個 16進位的數字表示後面要傳遞的資料長度。&lt;/p&gt;

&lt;p&gt;例如要列出所有 Devices 的時候，
所使用的指令是 &lt;code&gt;host:devices&lt;/code&gt;。
所以加上長度資訊就會變成 &lt;code&gt;000Chost:devices&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:devices&lt;/code&gt; 是 12 個字所以用 16 進位表示長度就是 &lt;code&gt;000C&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面是 Python 負責轉換指令的範例程式碼&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def encode(cmd):
  length = &amp;quot;{0:04X}{}&amp;quot;.format(len(cmd))
  return &amp;quot;{}{}&amp;quot;.format(length, cmd)

if __name__ == &amp;quot;__main__&amp;quot;:
  print(encode(&amp;quot;host:devices&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而 ADB Server 在收到指令之後，會立刻回傳一個長度為 4 bytes 的結果。
這個結果指的是&lt;strong&gt;傳送指令的結果&lt;/strong&gt;，而不是&lt;strong&gt;執行指令的結果&lt;/strong&gt;。
如果接收指令沒有任何問題的話，會回傳 &lt;code&gt;OKAY&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果前 4 個 bytes 不是 &lt;code&gt;OKAY&lt;/code&gt; 的話，
那麼他後面就會帶著 Error Message，要記得把他一起讀完。&lt;/p&gt;

&lt;h2 id=&#34;adb-的指令&#34;&gt;ADB 的指令&lt;/h2&gt;

&lt;p&gt;ADB 的傳輸內容大致上可以分為幾類&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;host&lt;/li&gt;
&lt;li&gt;host-serial&lt;/li&gt;
&lt;li&gt;host-transport&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;當你想透過 ADB 對某個 Device 下指令的時候，需要先使用 &lt;code&gt;host:transport:{serialno}&lt;/code&gt; 來切換目標。
而 &lt;code&gt;host&lt;/code&gt; 底下的指令則是針對 ADB Server 的指令，所以不需要進行 &lt;code&gt;host:transport&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;host&#34;&gt;host&lt;/h3&gt;

&lt;h4 id=&#34;connect&#34;&gt;connect&lt;/h4&gt;

&lt;p&gt;讓 ADB Server 連線到位於 {host}:{port} 的 Device ( 需要設定 Device 讓他的 Adb daemon 可以透過網路連接 )&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:connect:{host}:{port}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:connect:192.168.1.63:5555&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;devices&#34;&gt;devices&lt;/h4&gt;

&lt;p&gt;列出所有 Devices，也就是 &lt;code&gt;adb devices&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:devices&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;disconnect&#34;&gt;disconnect&lt;/h4&gt;

&lt;p&gt;中斷與某台 Device 的連線&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:disconnect:{hostla}:{port}&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;kill&#34;&gt;kill&lt;/h4&gt;

&lt;p&gt;叫 Adb Service 自殺&lt;/p&gt;

&lt;p&gt;&lt;code&gt;host:kill&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;track-devices&#34;&gt;track-devices&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;host:track-devices&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;將這個連線轉為專門 track devices 的連線，當 ADB Server 發現有 Device 被新增/移除的時候。
就會將最新的 Device List 傳送過來。&lt;/p&gt;

&lt;h4 id=&#34;transport&#34;&gt;transport&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;host:track-devices:&amp;lt;serial-number&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;transport 中最重要的指令，跟 ADB Service 說之後將這條連線的指令全都送到 &lt;code&gt;serial-number&lt;/code&gt; 這台機器或者模擬器上面。&lt;/p&gt;

&lt;h3 id=&#34;version&#34;&gt;version&lt;/h3&gt;

&lt;p&gt;整個 Protocol 的指令一共有以下幾種&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Protocol:
    OKAY = &#39;OKAY&#39;
    FAIL = &#39;FAIL&#39;
    STAT = &#39;STAT&#39;
    LIST = &#39;LIST&#39;
    DENT = &#39;DENT&#39;
    RECV = &#39;RECV&#39;
    DATA = &#39;DATA&#39;
    DONE = &#39;DONE&#39;
    SEND = &#39;SEND&#39;
    QUIT = &#39;QUIT&#39;

    @staticmethod
    def decode_length(length):
        return int(length, 16)

    @staticmethod
    def encode_length(length):
        return &amp;quot;{0:04X}&amp;quot;.format(length)

    @staticmethod
    def encode_data(data):
        b_data = data.encode(&#39;utf-8&#39;)
        b_length = Protocol.encode_length(len(b_data)).encode(&#39;utf-8&#39;)
        return b&amp;quot;&amp;quot;.join([b_length, b_data])
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;參考資料&#34;&gt;參考資料&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstf/adbkit&#34;&gt;adbkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://android.googlesource.com/platform/system/core/+/master/adb/protocol.txt&#34;&gt;adb protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://android.googlesource.com/platform/system/core/+/master/adb/SERVICES.TXT&#34;&gt;adb services&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>