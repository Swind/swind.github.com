{"THEME_REVEAL_CONGIF_TRANSITION": "cube", "message_Previous post": "Previous post", "LICENSE": "\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/2.5/ar/\">\n<img alt=\"Creative Commons License BY-NC-SA\"\nstyle=\"border-width:0; margin-bottom:12px;\"\nsrc=\"http://i.creativecommons.org/l/by-nc-sa/2.5/ar/88x31.png\"></a>", "text": "<html><body><p>\u6700\u8fd1\u88ab\u4e1f\u5230 FreeBSD \u8ddf C \u7684\u4e16\u754c\u88e1\u9762\uff0c\u6c92\u6709 Scala \u7684 Actor \u53ef\u4ee5\u7528\u3002\n\u6240\u4ee5\u53ea\u597d\u53c3\u8003\u5225\u4eba\u7684 Thread Pool \u4f86\u770b\u4e00\u4e0b\uff0c\u5728 C \u7684\u4e16\u754c\u88e1\u9762 Thread Pool \u662f\u600e\u9ebc\u5be6\u4f5c\u7684\u3002</p>\n<p>\u9996\u5148\u5148\u53bb StackOverFlow \u4e2d\u5c0b\u627e\u662f\u5426\u6709\u4eba\u554f\u904e\u985e\u4f3c\u7684\u554f\u984c</p>\n<p><a class=\"reference external\" href=\"http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation\">Existing threadpool C implementation</a></p>\n<p>\u88e1\u9762\u6709\u63d0\u5230\u5e7e\u500b C Thread Pool \u7684\u5be6\u4f5c\u7bc4\u4f8b\u8207\u53ef\u53c3\u8003\u7684\u6587\u4ef6</p>\n<ol class=\"arabic simple\">\n<li><a class=\"reference external\" href=\"https://github.com/mbrossard/threadpool\">threadpool-mbrossard</a></li>\n<li><a class=\"reference external\" href=\"http://people.clarkson.edu/~jmatthew/cs644.archive/cs644.fa2001/proj/locksmith/code/ExampleTest/\">threadpool-jmatthew</a></li>\n<li><a class=\"reference external\" href=\"http://sourceforge.net/projects/cthpool/\">cthreadpool</a></li>\n<li><a class=\"reference external\" href=\"https://github.com/Pithikos/C-Thread-Pool\">C-Thread-Pool</a></li>\n</ol>\n<p>\u6211\u9019\u908a\u662f\u76f4\u63a5\u61c9\u8a72\u662f\u6703\u4ee5 threadpool-mbrossard \u4f5c\u70ba\u7b2c\u4e00\u500b\u7814\u7a76\u7684\u7248\u672c\uff0c\u56e0\u70ba\u4ed6\u4e00\u76f4\u6709\u5728\u7dad\u8b77\u3002\n\u800c\u4e14\u4f5c\u8005\u5c31\u662f <a class=\"reference external\" href=\"http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation\">Existing threadpool C implementation</a> \u7684\u767c\u6587\u8005\uff0c\u611f\u89ba\u4ed6\u9084\u883b\u71b1\u5fc3\u7684\u3002</p>\n<div class=\"section\" id=\"threadpool\">\n<h2>threadpool</h2>\n<p><strong>A simple C thread pool implementation</strong></p>\n<p>Currently, the implementation:</p>\n<ul class=\"simple\">\n<li>Works with pthreads only, but API is intentionally opaque to allow\nother implementations (Windows for instance).</li>\n<li>Starts all threads on creation of the thread pool.</li>\n<li>Reserves one task for signaling the queue is full.</li>\n<li>Stops and joins all worker threads on destroy.</li>\n</ul>\n<div class=\"figure\">\n<object data=\"http://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg\" type=\"image/svg+xml\">\nhttp://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg</object>\n</div>\n<p>from wikipedia</p>\n</div>\n<div class=\"section\" id=\"thread-pool\">\n<h2>Thread Pool \u7684\u8cc7\u6599\u7d50\u69cb</h2>\n<p>\u9996\u5148 Thread Pool \u8981\u6709\u7684\u6771\u897f\u5c31\u662f job \u6216\u8005\u662f task \u8b93 Thread \u77e5\u9053\u4ed6\u5011\u8981\u505a\u4ec0\u9ebc\u4e8b\u60c5\u3002</p>\n<pre class=\"code c literal-block\">\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">function</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">);</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"kt\">threadpool_task_t</span><span class=\"p\">;</span>\n</pre>\n<p>\u6240\u4ee5\u53ea\u8981\u6709\u4e00\u500b\u8cc7\u6599\u7d50\u69cb\u7d00\u9304\u8981\u57f7\u884c\u7684 function pointer \u8207\u8981\u50b3\u905e\u7684\u53c3\u6578\u5373\u53ef\u3002\n\u63a5\u4e0b\u4f86\u5c31\u662f Thread Pool \u672c\u8eab\uff0c\u4ed6\u5fc5\u9808\u5b58\u653e\u6240\u6709\u7684 Thread \u8207 Job Queue</p>\n<pre class=\"code c literal-block\">\n<span class=\"k\">struct</span> <span class=\"kt\">threadpool_t</span> <span class=\"p\">{</span>\n    <span class=\"kt\">pthread_mutex_t</span> <span class=\"n\">lock</span><span class=\"p\">;</span>\n    <span class=\"kt\">pthread_cond_t</span> <span class=\"n\">notify</span><span class=\"p\">;</span>\n    <span class=\"kt\">pthread_t</span> <span class=\"o\">*</span><span class=\"n\">threads</span><span class=\"p\">;</span>\n    <span class=\"kt\">threadpool_task_t</span> <span class=\"o\">*</span><span class=\"n\">queue</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">thread_count</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">queue_size</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">head</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">tail</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">shutdown</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">started</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>\n<p>\u9019\u908a\u4ed6\u4f7f\u7528\u4e86\u4e00\u500b pthread_t \u7684 pointer \u4f86\u7d00\u9304\u6240\u6709\u7684 Thread\uff0c\u7c21\u55ae\u4f86\u8aaa\u5c31\u662f\u4e00\u500b pthread_t \u7684 array\uff0c\u800c head, tail \u5c31\u662f\u7d00\u9304 array \u7684 offset\u3002\nthreadpool_task_t \u4e5f\u662f\u4e00\u6a23\u7684\u539f\u7406\uff0c\u771f\u662f\u51fa\u4e4e\u610f\u6599\u7684\u7c21\u55ae\u3002</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2>ThreadPool \u7684\u5efa\u7acb\u8207\u5de5\u4f5c\u7684\u57f7\u884c</h2>\n<p>\u518d\u4f86\u5c31\u662f Thread Pool \u7684\u5efa\u7acb\uff0c\u7531\u65bc\u525b\u525b\u63d0\u5230\u7684\u4ed6\u5176\u5be6\u662f\u4f7f\u7528\u4e00\u500b pthread array \u8207\u4e00\u500b job array \u4f86\u5b58\u653e\u6240\u6709\u7684 thread \u8207 jobs\u3002\n\u56e0\u6b64\u9700\u8981\u5728\u4e00\u958b\u59cb\u7684\u6642\u5019\u5c31\u6c7a\u5b9a Thread Pool \u8207 Jobs \u7684\u6700\u5927\u6578\u91cf\u3002</p>\n<pre class=\"code c literal-block\">\n<span class=\"cm\">/* Allocate thread and task queue */</span>\n<span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">pthread_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">pthread_t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">thread_count</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">threadpool_task_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">threadpool_task_t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">queue_size</span><span class=\"p\">);</span>\n</pre>\n<p>\u800c\u6bcf\u500b Thread \u8981\u57f7\u884c\u7684 Function \u662f</p>\n<pre class=\"code c literal-block\">\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">threadpool_thread</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">threadpool</span><span class=\"p\">)</span>\n <span class=\"p\">{</span>\n     <span class=\"kt\">threadpool_t</span> <span class=\"o\">*</span><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">threadpool_t</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">threadpool</span><span class=\"p\">;</span>\n     <span class=\"kt\">threadpool_task_t</span> <span class=\"n\">task</span><span class=\"p\">;</span>\n\n     <span class=\"k\">for</span><span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n         <span class=\"cm\">/* Lock must be taken to wait on conditional variable */</span>\n         <span class=\"n\">pthread_mutex_lock</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">lock</span><span class=\"p\">));</span>\n\n         <span class=\"cm\">/* Wait on condition variable, check for spurious wakeups.\n            When returning from pthread_cond_wait(), we own the lock. */</span>\n         <span class=\"k\">while</span><span class=\"p\">((</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n             <span class=\"n\">pthread_cond_wait</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">notify</span><span class=\"p\">),</span> <span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">lock</span><span class=\"p\">));</span>\n         <span class=\"p\">}</span>\n\n         <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span> <span class=\"o\">==</span> <span class=\"n\">immediate_shutdown</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n            <span class=\"p\">((</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">shutdown</span> <span class=\"o\">==</span> <span class=\"n\">graceful_shutdown</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n             <span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n             <span class=\"k\">break</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n\n         <span class=\"cm\">/* Grab our task */</span>\n         <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">queue</span><span class=\"p\">[</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">].</span><span class=\"n\">function</span><span class=\"p\">;</span>\n         <span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">queue</span><span class=\"p\">[</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">].</span><span class=\"n\">argument</span><span class=\"p\">;</span>\n         <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n         <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">queue_size</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">head</span><span class=\"p\">;</span>\n         <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">count</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n         <span class=\"cm\">/* Unlock */</span>\n         <span class=\"n\">pthread_mutex_unlock</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">lock</span><span class=\"p\">));</span>\n\n         <span class=\"cm\">/* Get to work */</span>\n         <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">function</span><span class=\"p\">))(</span><span class=\"n\">task</span><span class=\"p\">.</span><span class=\"n\">argument</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n\n     <span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">started</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\n     <span class=\"n\">pthread_mutex_unlock</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">-&gt;</span><span class=\"n\">lock</span><span class=\"p\">));</span>\n     <span class=\"n\">pthread_exit</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n</pre>\n<p>\u5728 <strong>for(;;)</strong> \u88e1\u9762\uff0cThread \u7b2c\u4e00\u4ef6\u8981\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u53bb\u6436\u596a pool \u7684 lock\uff0c\u7576\u6436\u5230 lock \u7684 Thread \u767c\u73fe\u6c92\u6709\u5de5\u4f5c\u53ef\u4ee5\u505a\u7684\u6642\u5019\uff0c\n\u5c31\u6703\u57f7\u884c pthread_cond_wait \u4f86\u7b49\u5f85\u901a\u77e5\u3002\u9019\u6642\u5019 pool-&gt;lock \u6703\u88ab Unlock\uff0c\u56e0\u6b64\u9019\u6642\u5019\u5176\u4ed6 Thread \u4e5f\u53ef\u4ee5\u9032\u4f86\u9019\u500b\u5340\u57df\u3002\n\u6240\u4ee5\u5728\u5b8c\u5168\u6c92\u6709\u5de5\u4f5c\u7684\u60c5\u6cc1\u4e0b\uff0c\u6240\u6709\u7684 Thread \u90fd\u6703\u5728\u9019\u908a Waiting\u3002</p>\n<p>\u7576 Thread \u88ab\u900f\u904e pthread_cond_signal \u559a\u9192\u7684\u6642\u5019\uff0c\u8a72 Thread \u5c31\u6703\u91cd\u65b0\u53d6\u5f97 pool-&gt;lock\u3002\n\u9019\u6642\u4ed6\u5c31\u53ef\u4ee5\u5b89\u5fc3\u7684\u53d6\u51fa queue \u4e2d\u7684 task\uff0c\u7b49\u5f85\u53d6\u51fa\u5b8c\u7562\u4e4b\u5f8c\uff0c\u518d unlock \u8b93\u5176\u4ed6\u88ab\u559a\u9192\u7684 Thread \u4e5f\u53ef\u4ee5\u53bb\u53d6\u5f97 Task\u3002</p>\n<p>\u4e4b\u5f8c\u5c31\u662f\u57f7\u884c task \u4e2d\u7684 function pointer \u505a\u8a72\u505a\u7684\u5de5\u4f5c\u3002</p>\n</div>\n<div class=\"section\" id=\"threadpool-destory\">\n<h2>ThreadPool \u7684 destory</h2>\n<p>destory \u5c31\u66f4\u7c21\u55ae\u4e86\uff0c\u53ea\u8981\u4f7f\u7528 pthread_cond_broadcast \u901a\u77e5\u6240\u6709\u7684 Thread \u8d77\u4f86\uff0c\u7531\u65bc shoutdown \u7684\u78ba\u8a8d\u6703\u5728\u57f7\u884c\u5de5\u4f5c\u4e4b\u524d\u3002\n\u6240\u4ee5\u8a72 thread \u5c31\u6703\u96e2\u958b\u57f7\u884c\u5de5\u4f5c\u7684\u8ff4\u5708\uff0c\u4e26\u4e14\u7d50\u675f\u3002</p>\n<p><a class=\"reference external\" href=\"https://github.com/mbrossard/threadpool/blob/master/src/threadpool.c\">mbrossard \u5b8c\u6574\u7684 ThreadPool \u539f\u59cb\u78bc</a></p>\n<p>\u5176\u5be6\u5beb\u9019\u7bc7\u7b46\u8a18\u61c9\u8a72\u53ea\u662f\u60f3\u8cbc\u9019\u500b</p>\n<div class=\"figure\">\n<img alt=\"https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg\" src=\"https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg\">\n</div>\n<blockquote>\n<p>\u751f\u5b58\u6226\u7565\uff01</p>\n<cite title=\"Source Title\">\u8f2a\u308b\u30d4\u30f3\u30b0\u30c9\u30e9\u30e0</cite>\n</blockquote></div></body></html>", "ARCHIVE_FILENAME": "archive.html", "THEME_REVEAL_CONGIF_SUBTHEME": "sky", "message_Read more": "Read more", "SITE_URL": "http://swind.code-life.info", "LISTINGS_FOLDER": "listings", "INDEXES_PAGES": "", "next": false, "message_Next post": "Next post", "BLOG_DESCRIPTION": "I am Swind.", "EXTRA_HEAD_DATA": "", "DEFAULT_LANG": "en", "disqus_html": "<div id=\"disqus_thread\"></div> <script type=\"text/javascript\">var disqus_shortname=\"swindgithub\";var disqus_url=\"http://swind.code-life.info/posts/c-thread-pool.html\";(function(){var a=document.createElement(\"script\");a.type=\"text/javascript\";a.async=true;a.src=\"http://\"+disqus_shortname+\".disqus.com/embed.js\";(document.getElementsByTagName(\"head\")[0]||document.getElementsByTagName(\"body\")[0]).appendChild(a)})();        </script><noscript>Please enable JavaScript to view the <a href=\"http://disqus.com/?ref_noscript\">comments powered by DISQUS.</a></noscript><a href=\"http://disqus.com\"class=\"dsq-brlink\">comments powered by <span class=\"logo-disqus\">DISQUS</span></a>", "RSS_PATH": "", "title": "C \u7684 Thread Pool \u7b46\u8a18", "SEARCH_FORM": "", "message_Tags": "Tags", "INDEX_PATH": "", "BLOG_AUTHOR": "Swind", "message_Older posts": "Older posts", "OUTPUT_FOLDER": "output", "message_Original site": "Original site", "ANALYTICS": "", "BLOG_EMAIL": "", "message_Posts for year %s": "Posts for year %s", "message_old posts page %d": "old posts page %d", "BLOG_TITLE": "Corleonis", "message_Posted": "Posted", "GALLERY_PATH": "galleries", "CODE_COLOR_SCHEME": "default", "message_Read in English": "Read in English", "CACHE_FOLDER": "cache", "tags": [], "tags?": false, "__file__": "conf.pyc", "translations": [], "CONTENT_FOOTER": "Contents &copy; 2013 <a href=\"mailto:\">Swind</a> - Powered by <a href=\"http://nikola.ralsina.com.ar\">Nikola</a>", "BASE_URL": "http://swind.code-life.info", "THEME": "mySite", "message_Also available in": "Also available in", "BLOG_URL": "http://swind.code-life.info", "date": "2013-06-07 21:43", "__name__": "conf", "message_Posts about %s": "Posts about %s", "message_Posts for {month} {year}": "Posts for {month} {year}", "message_More posts about": "More posts about", "ARCHIVE_PATH": "", "DATE_FORMAT": "%Y-%m-%d %H:%M", "TAG_PATH": "categories", "prev": "/posts/play-note-1.json", "message_Newer posts": "Newer posts", "message_LANGUAGE": "English", "MATHJAX_CONFIG": "", "message_Archive": "Archive", "message_Source": "Source", "DISQUS_FORUM": "swindgithub", "INDEXES_TITLE": ""}