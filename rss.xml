<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Corleonis</title><link>http://swind.code-life.info/</link><description>Corleonis</description><language>en</language><lastBuildDate>Thu, 29 May 2014 11:20:00 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>加速 FreeBSD Kernel 的編譯</title><link>http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;這幾天要開始 Build FreeBSD Kernel 了，
可是 buildworld 跟 buildkernel 都需要花費非常久的時間。&lt;/p&gt;
&lt;p&gt;因此想要研究一下是否能加速 FreeBSD Kernel 的編譯速度，
加快開發測試的流程，以及減少 CI 所需要花費的時間。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>C</category><category>FreeBSD</category><guid>http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html</guid><pubDate>Wed, 18 Sep 2013 06:00:09 GMT</pubDate></item><item><title>簡單易懂的 Python Plugin 架構 (大概 ...)</title><link>http://swind.code-life.info/posts/simple-python-plugin-framework.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;學習用 Python 寫測試工具快兩個星期了，主要使用 clime + ucltip 跟 pyinstaller。
可是目前遇到一個問題，當我使用 pyinstaller 將測試工具打包之後，
他會很貼心的幫你將所有 .py 檔包裝成一個可執行檔。
所以當我要任何新增 command 都必須要重新部屬那個執行檔，這樣實在非常的麻煩。&lt;/p&gt;
&lt;p&gt;因此才會開始嘗試是否有可能執行檔只包裝 clime, ucltip 以及我自己所提供的 API，
然後 command 的部份就利用 plugin 的方式來增加。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/simple-python-plugin-framework.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><guid>http://swind.code-life.info/posts/simple-python-plugin-framework.html</guid><pubDate>Sun, 25 Aug 2013 07:26:12 GMT</pubDate></item><item><title>使用 Python 結合 C 在 Linux 發送 SCSI Command</title><link>http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;最近因為工作的需要，所以要撰寫很多 SCSI 相關的測試。
目前可以用的測試工具有 fio, iometer 以及一個自行開發的 SCSI Command 驗證的工具。
但是這些都是使用 C 撰寫的，所以要撰寫一些流程比較複雜的驗證時，就變得非常的麻煩。
絕對不是因為我想試試看 Python 或者是因為自行開發的驗證工具程式碼已經無法閱讀的原因，才想要重造輪子。&lt;/p&gt;
&lt;p&gt;Orz 而且我受夠了手動測試的生活了 ...&lt;/p&gt;
&lt;p&gt;所以想將測試運行的邏輯搬移到 Python 的部份，加速測試案例的開發速度。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;</description><category>C/C++</category><category>Python</category><guid>http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html</guid><pubDate>Sat, 03 Aug 2013 02:38:06 GMT</pubDate></item><item><title>CMake - add_custom_command</title><link>http://swind.code-life.info/posts/cmake-add_custom_command.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;最近因為必須要示範如何將公司的 autoconf 與 automake 轉成 CMake，所以稍微研究了一下之前完全沒有用過得 &lt;a class="reference external" href="http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_custom_command"&gt;add_custom_command&lt;/a&gt; 跟 &lt;a class="reference external" href="http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_custom_target"&gt;add_custom_target&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="symbolic-link"&gt;
&lt;h2&gt;建立 symbolic link&lt;/h2&gt;
&lt;p&gt;目前有一個需求是要建立 symbolic link 在某些特定的資料夾裡面。
由於 autotools 是可以直接使用 script 的語法，所以建立起來非常簡單。&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
install-exec-hook:
     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path1
     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path2
     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path3
     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path4
     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path5
&lt;/pre&gt;
&lt;p&gt;這樣只要直接呼叫 make install-exec-hook 就可以建立 symbolic link 了。
但是如果要在 CMake 裡面作到一樣的事情要怎麼處理呢？&lt;/p&gt;
&lt;pre class="code cmake literal-block"&gt;
&lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;targets&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path1&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path2&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path3&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path4&lt;/span&gt;
    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path5&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Create_symbolic_link&lt;/span&gt; &lt;span class="s"&gt;source&lt;/span&gt; &lt;span class="s"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;Add_custom_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;COMMAND&lt;/span&gt; &lt;span class="s"&gt;ln&lt;/span&gt; &lt;span class="s"&gt;-fs&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Endfunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;Foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt; &lt;span class="s"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nb"&gt;Create_symbolic_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;source_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/a&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Endforeach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;Add_custom_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;install-exec-hook&lt;/span&gt; &lt;span class="s"&gt;DEPENDS&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;因為 CMake 裡面沒有辦法像 shell script 一樣直接下指令，必須透過 Add_custom_command 或者是 Execute_process 等方式執行。
但是若又要跟 Target 建立相依性的話，似乎就一定得靠 Add_custom_command，因為他會設定一個 output file。
這樣就可以讓 Target 依賴這個檔案 ( 以我們的例子來說 Target 就是 install-exec-hook ) 來達到 make Target 就可以建立 symbolic link 的目的。&lt;/p&gt;
&lt;p&gt;閃死人不償命的組合 ...&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://dl.dropboxusercontent.com/u/15537823/Blog/banner-of-the-stars_2.jpg" src="https://dl.dropboxusercontent.com/u/15537823/Blog/banner-of-the-stars_2.jpg"&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;星たちよ&lt;/p&gt;
&lt;p&gt;汝の命短き眷族の望みを聞くがよい。&lt;/p&gt;
&lt;p&gt;我らの望みヽ&lt;/p&gt;
&lt;p&gt;それは&lt;/p&gt;
&lt;p&gt;汝の本降ちゆくを看取ること&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>C/C++</category><category>CMake</category><guid>http://swind.code-life.info/posts/cmake-add_custom_command.html</guid><pubDate>Tue, 25 Jun 2013 11:20:46 GMT</pubDate></item><item><title>C 的 Thread Pool 筆記</title><link>http://swind.code-life.info/posts/c-thread-pool.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;最近被丟到 FreeBSD 跟 C 的世界裡面，沒有 Scala 的 Actor 可以用。
所以只好參考別人的 Thread Pool 來看一下，在 C 的世界裡面 Thread Pool 是怎麼實作的。&lt;/p&gt;
&lt;p&gt;首先先去 StackOverFlow 中尋找是否有人問過類似的問題&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation"&gt;Existing threadpool C implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;裡面有提到幾個 C Thread Pool 的實作範例與可參考的文件&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;&lt;a class="reference external" href="https://github.com/mbrossard/threadpool"&gt;threadpool-mbrossard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.clarkson.edu/~jmatthew/cs644.archive/cs644.fa2001/proj/locksmith/code/ExampleTest/"&gt;threadpool-jmatthew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sourceforge.net/projects/cthpool/"&gt;cthreadpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Pithikos/C-Thread-Pool"&gt;C-Thread-Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我這邊是直接應該是會以 threadpool-mbrossard 作為第一個研究的版本，因為他一直有在維護。
而且作者就是 &lt;a class="reference external" href="http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation"&gt;Existing threadpool C implementation&lt;/a&gt; 的發文者，感覺他還蠻熱心的。&lt;/p&gt;
&lt;div class="section" id="threadpool"&gt;
&lt;h2&gt;threadpool&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A simple C thread pool implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently, the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Works with pthreads only, but API is intentionally opaque to allow
other implementations (Windows for instance).&lt;/li&gt;
&lt;li&gt;Starts all threads on creation of the thread pool.&lt;/li&gt;
&lt;li&gt;Reserves one task for signaling the queue is full.&lt;/li&gt;
&lt;li&gt;Stops and joins all worker threads on destroy.&lt;/li&gt;
&lt;/ul&gt;&lt;div class="figure"&gt;
&lt;object data="http://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg" type="image/svg+xml"&gt;
http://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg&lt;/object&gt;
&lt;/div&gt;
&lt;p&gt;from wikipedia&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thread-pool"&gt;
&lt;h2&gt;Thread Pool 的資料結構&lt;/h2&gt;
&lt;p&gt;首先 Thread Pool 要有的東西就是 job 或者是 task 讓 Thread 知道他們要做什麼事情。&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;所以只要有一個資料結構紀錄要執行的 function pointer 與要傳遞的參數即可。
接下來就是 Thread Pool 本身，他必須存放所有的 Thread 與 Job Queue&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;pthread_mutex_t&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;pthread_cond_t&lt;/span&gt; &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thread_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;這邊他使用了一個 pthread_t 的 pointer 來紀錄所有的 Thread，簡單來說就是一個 pthread_t 的 array，而 head, tail 就是紀錄 array 的 offset。
threadpool_task_t 也是一樣的原理，真是出乎意料的簡單。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ThreadPool 的建立與工作的執行&lt;/h2&gt;
&lt;p&gt;再來就是 Thread Pool 的建立，由於剛剛提到的他其實是使用一個 pthread array 與一個 job array 來存放所有的 thread 與 jobs。
因此需要在一開始的時候就決定 Thread Pool 與 Jobs 的最大數量。&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cm"&gt;/* Allocate thread and task queue */&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pthread_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thread_count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;而每個 Thread 要執行的 Function 是&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;threadpool_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;threadpool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;threadpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="cm"&gt;/* Lock must be taken to wait on conditional variable */&lt;/span&gt;
         &lt;span class="n"&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

         &lt;span class="cm"&gt;/* Wait on condition variable, check for spurious wakeups.
            When returning from pthread_cond_wait(), we own the lock. */&lt;/span&gt;
         &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;pthread_cond_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;immediate_shutdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;graceful_shutdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="cm"&gt;/* Grab our task */&lt;/span&gt;
         &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

         &lt;span class="cm"&gt;/* Unlock */&lt;/span&gt;
         &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

         &lt;span class="cm"&gt;/* Get to work */&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
     &lt;span class="n"&gt;pthread_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;在 &lt;strong&gt;for(;;)&lt;/strong&gt; 裡面，Thread 第一件要做的事情就是去搶奪 pool 的 lock，當搶到 lock 的 Thread 發現沒有工作可以做的時候，
就會執行 pthread_cond_wait 來等待通知。這時候 pool-&amp;gt;lock 會被 Unlock，因此這時候其他 Thread 也可以進來這個區域。
所以在完全沒有工作的情況下，所有的 Thread 都會在這邊 Waiting。&lt;/p&gt;
&lt;p&gt;當 Thread 被透過 pthread_cond_signal 喚醒的時候，該 Thread 就會重新取得 pool-&amp;gt;lock。
這時他就可以安心的取出 queue 中的 task，等待取出完畢之後，再 unlock 讓其他被喚醒的 Thread 也可以去取得 Task。&lt;/p&gt;
&lt;p&gt;之後就是執行 task 中的 function pointer 做該做的工作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="threadpool-destory"&gt;
&lt;h2&gt;ThreadPool 的 destory&lt;/h2&gt;
&lt;p&gt;destory 就更簡單了，只要使用 pthread_cond_broadcast 通知所有的 Thread 起來，由於 shoutdown 的確認會在執行工作之前。
所以該 thread 就會離開執行工作的迴圈，並且結束。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mbrossard/threadpool/blob/master/src/threadpool.c"&gt;mbrossard 完整的 ThreadPool 原始碼&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其實寫這篇筆記應該只是想貼這個&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg" src="https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg"&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;生存戦略！&lt;/p&gt;
&lt;cite title="Source Title"&gt;輪るピングドラム&lt;/cite&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>C</category><guid>http://swind.code-life.info/posts/c-thread-pool.html</guid><pubDate>Fri, 07 Jun 2013 13:43:28 GMT</pubDate></item><item><title>Scala 使用 Play 筆記 (1)</title><link>http://swind.code-life.info/posts/play-note-1.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;會想要重拾 Scala 跟 Play 主要是因為看到了這篇文章&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://minipai.tumblr.com/post/41882685541/22k"&gt;怎麼設計22K?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因為覺得這個設計理念真的是太正面了 XDDD&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以我要以正面的意念來設計這個網站！&lt;/p&gt;
&lt;p class="attribution"&gt;—Art Pai&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;剛好之前也一直對 Play Framework 很有興趣，所以就大概花了兩個小時把 API 簡單的接上去，順便玩一下 Play Framework 2.0。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Swind/22k"&gt;原始碼&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自從開始工作之後，我就放棄了我會把東西記起來這件事情。
所以我決定把使用 Play 實作的過程記錄一下，以方便我日後回憶。&lt;/p&gt;
&lt;p&gt;整個實作過程是參考 &lt;a class="reference external" href="http://www.playframework.org/documentation/2.1-RC4/ScalaTodoList"&gt;Your first Play application&lt;/a&gt; 這篇文章的。&lt;/p&gt;
&lt;p&gt;P.S 這篇文章寫到一半的時候 Play 2.1 出了 Orz ...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/play-note-1.html"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;</description><category>Other</category><guid>http://swind.code-life.info/posts/play-note-1.html</guid><pubDate>Sat, 02 Feb 2013 01:11:00 GMT</pubDate></item><item><title>Pelican 轉移到 Nikola</title><link>http://swind.code-life.info/posts/pelican-to-nikola.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;之前雖然從 Octopress 跳到 Pelican 脫離了 Ruby 的環境，也花了一些時間在修改 Theme。
但是還是很難喜歡上 Pelican，最主要的就是他的手冊很難閱讀，而且資訊有點少 Orz。&lt;/p&gt;
&lt;p&gt;Nikola 的手冊就比較簡潔清楚，也比較好查詢。
且查詢了一下 Nikola 的事蹟之後發現他太帥了！&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E5%B0%BC%E5%8F%A4%E6%8B%89%C2%B7%E7%89%B9%E6%96%AF%E6%8B%89"&gt;Wiki 尼古拉 特斯拉&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以後來就決定跳過來了～&lt;/p&gt;
&lt;div class="section" id="windows-nikola"&gt;
&lt;h2&gt;在 Windows 上安裝 Nikola&lt;/h2&gt;
&lt;p&gt;在 Windows 上面安裝 Nikola 實在是有點悲劇，因為他所使用的 Library 有一些會使用到 C 的程式碼。
因此需要編譯，可是他又會連結到其他 C Library（例如 pillow or pil），所以就卡在安裝相依性套件這一關。&lt;/p&gt;
&lt;p&gt;雖然用 pip 安裝 pil 或者是 pillow 也可以，但是安裝完之後會因為缺少某些 library 而導致像 jpg 等圖片格式不被支援。&lt;/p&gt;
&lt;p&gt;最後是找到了 &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Unofficial Windows Binaries for Python Extension Packages&lt;/a&gt; 下載了 pil 才解決了相依性安裝問題。
這些相依性的 Library 安裝完畢之後，就可以使用 pip 安裝 Nikola 了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But ! 就是這個 But !。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;當你開心安裝完畢 Nikola 之後會發現無法使用 nikola 的指令。&lt;/p&gt;
&lt;p&gt;因為他放在 Python Scripts 資料夾底下的 Script 檔名是 &lt;strong&gt;nikola&lt;/strong&gt;，Windows 不會覺得他是執行檔，所以沒有辦法執行指令。
( 如果有人有知道其他執行方式的話請跟我說 m(_ _)m )&lt;/p&gt;
&lt;p&gt;一開始我很天真的覺得改成 nikola.py 就沒有問題了，但是在執行中 import 會出問題，因為 nikola 這個名字重複了 Orz。
所以最後是多寫一個 nikola.bat&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
C:&lt;span class="se"&gt;\P&lt;/span&gt;ython27&lt;span class="se"&gt;\p&lt;/span&gt;ython.exe C:&lt;span class="se"&gt;\P&lt;/span&gt;ython27&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\n&lt;/span&gt;ikola %1 %2 %3 %4
&lt;/pre&gt;
&lt;p&gt;放在 Scripts 資料夾底下，來解決這個問題。&lt;/p&gt;
&lt;p&gt;上面的 Script 因為我找不到 Windows 裡面代表所有傳入參數的符號，
只好就土法煉鋼一個一個輸入，所以最多只能輸入四個參數。&lt;/p&gt;
&lt;p&gt;（如果有人有好得解決方式也請教我一下 m(_ _)m )&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/pelican-to-nikola.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Other</category><guid>http://swind.code-life.info/posts/pelican-to-nikola.html</guid><pubDate>Tue, 22 Jan 2013 01:11:00 GMT</pubDate></item><item><title>一鍵安裝 Linux 設定檔</title><link>http://swind.code-life.info/posts/install-linux-config.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;我常用的 Linux 環境一定會裝下面幾個工具&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;zsh 與 oh-my-zsh&lt;/li&gt;
&lt;li&gt;vim 很多很多 vim plugin&lt;/li&gt;
&lt;li&gt;tmux 與他的快樂設定檔&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;一開始開發環境只有一兩台，一個個手動安裝還沒什麼問題。
再加上那時後有從 vgod 的 &lt;a class="reference external" href="http://blog.vgod.tw/2011/03/19/vimrc/"&gt;分享我的 vim 設定檔&lt;/a&gt; 這文章中學到使用 pathogen + github 來管理 vim。
所以一直就懶得去想辦法整理這些設定檔。&lt;/p&gt;
&lt;p&gt;可是最近要管理的機器變多了，而且加上最近再進行 porting 的工作，所以又有各種不同版本的 Linux 需要設定。&lt;/p&gt;
&lt;p&gt;就在今天，終於 &lt;strong&gt;爆～～～～發～～～～啦！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;感謝 JosephJ 的 &lt;a class="reference external" href="http://josephj.com/entry.php?id=374"&gt;一個指令安裝所有 Linux 設定檔&lt;/a&gt; 以及該篇文章的回應。
我最後也從 pathogen.vim 叛逃，使用 github + shell script + vundle 來完成我 zsh、tmux 與 vim 的設定。&lt;/p&gt;
&lt;p&gt;關於 vundle 的使用方式與設定我是參考 &lt;a class="reference external" href="http://yishanhe.net/using-vim-vundle-for-better-plugin-management/"&gt;使用Vundle更好的管理你的Vim插件&lt;/a&gt; 雖然是簡體的。不過設定與使用方式都寫得非常詳細。&lt;/p&gt;
&lt;p&gt;經過一個早上的努力，我也終於可以使用&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
wget -O - https://raw.github.com/Swind/linux-config/master/install.sh | sh
&lt;/pre&gt;
&lt;p&gt;把 Linux 給設定完畢了～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2013.02.08 update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我發現在其他機器上使用的時候會有:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ERROR: certificate common name “*.a.ssl.fastly.net” doesn’t match requested host name “raw.github.com”.
To connect to raw.github.com insecurely, use ‘--no-check-certificate’.
&lt;/pre&gt;
&lt;p&gt;的錯誤訊息，目前我還沒有很仔細的去找原因。&lt;/p&gt;
&lt;p&gt;不過如他所敘述的，加入 --no-check-certificate 就沒有問題了。&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
wget --no-check-certificate -O - https://raw.github.com/Swind/linux-config/master/install.sh | sh
&lt;/pre&gt;
&lt;p&gt;除此之外 JosephJ 所給的建議也非常的實用，
將常用的工具與指令整理成一份文件，來協助管理與記憶。
目前我是用 Nikola (對沒錯，所從 Octopress 跳到 Pelican 又跳到 Nikola 了 XD) stories 來作筆記。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/install-linux-config.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><guid>http://swind.code-life.info/posts/install-linux-config.html</guid><pubDate>Mon, 21 Jan 2013 14:36:41 GMT</pubDate></item><item><title>Golang - Goroutine 筆記 (1)</title><link>http://swind.code-life.info/posts/goroutine-note-1.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;會想到用這個是由於 EPUBConverter Go 的版本雖然運作上已經比 Scala 版本快上不少了。
但我發現在執行的時候 CPU 使用率一直都只有 25 %，所以才想試試看使用 goroutine 看能不能讓他轉換更快一點。&lt;/p&gt;
&lt;p&gt;依照文件所說，在執行 IO 相關動作的時候，會將 CPU 讓給 goroutine 來使用，那麼對於 EPUBConverter 的效能應該會有顯著的提昇。&lt;/p&gt;
&lt;p&gt;雖然有人說 goroutine 跟 Scala 的 actor 有點像，但是 actor 的模型就很具體跟明確。
而 goroutine 則是提供一個方便快速的 thread 操作方式。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/goroutine-note-1.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Go</category><guid>http://swind.code-life.info/posts/goroutine-note-1.html</guid><pubDate>Sun, 09 Dec 2012 10:00:00 GMT</pubDate></item><item><title>EPUBConverter 0.0.2 - 其實已經重寫了 Orz</title><link>http://swind.code-life.info/posts/epubconverter-0_0_2.html</link><dc:creator>Swind</dc:creator><description>&lt;p&gt;一開始的 Scala 版本本來是自己寫來自己用的小工具，可是沒想到竟然有人有用還有回報問題。
大受感動之餘（誤），而出現了這個全新感受的 EPUBConverter 0.0.2，絕對不是因為手癢想要試試看 Go。&lt;/p&gt;
&lt;p&gt;P.S 2012.12.09 更新 - 修正了鳥 Bug 所以到 0.0.3 了。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://dl.dropbox.com/u/15537823/EPUBConverter_0.0.3.7z"&gt;EPUBConverter 0.0.3 下載&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go"&gt;EPUBConverter Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個版本比之前好得地方在於，這次使用了 &lt;a class="reference external" href="http://tongwen.openfoundry.org/"&gt;新同文堂&lt;/a&gt; 的簡繁轉換對照表。
除了單字轉換之外，還多了一個詞彙轉換。&lt;/p&gt;
&lt;p&gt;所以轉換品質應該會比之前 Scala 的版本好很多，感謝新同文堂分享對照表。
他的 Bookmarklet 版本也非常好用，基本上我 Go 的轉換邏輯就是從 Bookmarklet 版本移植過來的。&lt;/p&gt;
&lt;p&gt;但是由於我直接將對照表轉換成 Golang 裡面的 map 了，所以這次就沒有辦法讓使用者自己改對照表了。&lt;/p&gt;
&lt;p&gt;不過有興趣的人，在原始碼的 &lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go/tree/master/tongwen_table"&gt;tongwen_table&lt;/a&gt; 資料夾底下，我有放了一個簡單的轉換工具。
可以利用那個重新產生 Go 的 map，但是最後還是得重新編譯整個 EPUBConverter 就是了。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/epubconverter-0_0_2.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;</description><category>Go</category><guid>http://swind.code-life.info/posts/epubconverter-0_0_2.html</guid><pubDate>Sat, 08 Dec 2012 10:00:00 GMT</pubDate></item></channel></rss>