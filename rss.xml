<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Corleonis</title><link>http://swind.code-life.info/</link><description>Corleonis</description><atom:link href="http://swind.code-life.info/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Wed, 01 Apr 2015 17:11:53 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>在 Python 使用 nanomsg</title><link>http://swind.code-life.info/posts/python-nanomsg.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;這幾個月，難得有東西可以完全照自己的意思亂寫（因為開發者只有我一個）&lt;/p&gt;
&lt;p&gt;所以就開始測試一些只有聽過得工具。&lt;/p&gt;
&lt;p&gt;因為用膩了 Python 裡面的 Queue，並且幻想以後程式可以在不同的地方上執行。&lt;/p&gt;
&lt;p&gt;所以選擇了 &lt;a class="reference external" href="http://nanomsg.org/"&gt;nanomsg&lt;/a&gt; 雖然現在只是在 Process 間溝通，但是真要改成透過網路溝通的時候，&lt;/p&gt;
&lt;p&gt;只需要改變 nanomsg 的 protocol 就可以了。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/python-nanomsg.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>http://swind.code-life.info/posts/python-nanomsg.html</guid><pubDate>Tue, 31 Mar 2015 14:36:25 GMT</pubDate></item><item><title>自製 Vagrant Box</title><link>http://swind.code-life.info/posts/create-vagrant-box.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;最近都在使用 Vagrant 以及看在 &lt;a class="reference external" href="http://teddysoft.tw/category/ccagile/"&gt;C.C Agile&lt;/a&gt; 中 &lt;a class="reference external" href="http://ithelp.ithome.com.tw/profile?id=20014061"&gt;beelit94&lt;/a&gt; 所介紹的 Packer。&lt;/p&gt;
&lt;p&gt;目前是使用 Vagrant 來統一公司同事的測試環境，減少因為環境不同而導致的 bug。&lt;/p&gt;
&lt;p&gt;這邊主要是筆記自己建立 box 時所要設定的內容，主要都是參考 &lt;a class="reference external" href="http://williamwalker.me/blog/creating-a-custom-vagrant-box.html"&gt;Creating a Custom Vagrant Box&lt;/a&gt; 的文章。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/create-vagrant-box.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>vagrant</category><guid>http://swind.code-life.info/posts/create-vagrant-box.html</guid><pubDate>Thu, 25 Sep 2014 08:16:25 GMT</pubDate></item><item><title>使用 Python 透過 SSH 讀取遠端的檔案</title><link>http://swind.code-life.info/posts/read_remote_file_using_python_and_ssh.html</link><dc:creator>Swind</dc:creator><description>&lt;div class="section" id="tail"&gt;
&lt;h2&gt;tail 遠端的檔案&lt;/h2&gt;
&lt;p&gt;最近的自動化測試需要去做類似 tail 的動作來確認在執行 TestCase 的過程中，
server log 沒有吐出不該出現的錯誤。&lt;/p&gt;
&lt;p&gt;可是又不能透過 fabric 直接下 tail 指令，因此這次透過了 SFTP 來實現這個功能。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/read_remote_file_using_python_and_ssh.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><guid>http://swind.code-life.info/posts/read_remote_file_using_python_and_ssh.html</guid><pubDate>Sun, 06 Jul 2014 12:45:37 GMT</pubDate></item><item><title>用 Python 建立假的 REST API Server 進行測試</title><link>http://swind.code-life.info/posts/testing-your-rest-client.html</link><dc:creator>Swind</dc:creator><description>&lt;div class="section" id="orz"&gt;
&lt;h2&gt;又再做不同的東西了 Orz&lt;/h2&gt;
&lt;p&gt;最近因為在修改新公司的 CLI 程式, 所以順便想了一下要怎麼測試比較好。
這個 CLI 是透過 server 所提供的 REST API 來操作遠端的 Server,
因此我剛接手的時候都是真的去連到一個 Server 進行開發。&lt;/p&gt;
&lt;p&gt;但是 Server 上有很多的操作需要硬體的配合, 或者要產生某種 error code 並不是這麼容易。
所以想要在 unittest 的測試過程中建立假的 REST API Server 讓 testcase 針對各種不同的回傳值進行測試。&lt;/p&gt;
&lt;p&gt;當然, 在程式架構設計的好的情況下, 其實不需要建立這種假的 Server。
但我目前正在重構中, 要將 CLI 的架構重新設計, 並且在這過程之中要維持程式可以正常運作。
所以我必須確保還未重構的功能還能正常運作, 因此我想建立假的 REST API Server 是個可以同時兼顧新舊架構的好方法。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/testing-your-rest-client.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Python</category><category>Test</category><guid>http://swind.code-life.info/posts/testing-your-rest-client.html</guid><pubDate>Sat, 24 May 2014 03:18:00 GMT</pubDate></item><item><title>透過 Travis 自動佈署 Nikola 產生的網頁到 GitHub 上</title><link>http://swind.code-life.info/posts/auto-deploying-my-nikola-blog-to-github-by-travis-ci.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;之前一直想要找 Server 可以結合 Jenkins 或者 Script 讓我不用每次都要重複安裝 Nikola 這件事情。
可是一直都沒有找到合用的，後來發現 &lt;a class="reference external" href="https://travis-ci.org"&gt;Travis&lt;/a&gt; + &lt;a class="reference external" href="https://github.com"&gt;GitHub&lt;/a&gt; 這個很多人使用的組合。
因此開始嘗試在將文章 commit 到 GitHub 上面之後， Travis 可以自動使用 nikola build 產生 HTML 檔案，
並且 Commit 回去 GitHub。&lt;/p&gt;
&lt;p&gt;由於我的 GitHub 上面的網頁換了很多次系統 Octopress -&amp;gt; Pelican -&amp;gt; Nikola，在加上那時候對於 GitHub Pages 的設定不是很了解。
所以 git 上的 branch 有點奇怪。&lt;/p&gt;
&lt;p&gt;我目前的 branch 有兩個&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5827603fe36d458e822fb71065790d4e-1"&gt;&lt;/a&gt;- master
&lt;a name="rest_code_5827603fe36d458e822fb71065790d4e-2"&gt;&lt;/a&gt;- source
&lt;/pre&gt;&lt;p&gt;master 就是 GitHub Pages 的部份，而 source 則是放 Nikola 的設定檔以及文章的原始檔。
現在 GitHub 預設放網頁的 branch 好像可以改成  gh-pages。不過改設定又是浩大工程，我以我就繼續沿用之前的 branch 了。
另外 Nikola 現在應該也有部屬到 GitHub 的功能，所以下面的流程說不定可以弄個更簡潔。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/auto-deploying-my-nikola-blog-to-github-by-travis-ci.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Nikola</category><category>Python</category><guid>http://swind.code-life.info/posts/auto-deploying-my-nikola-blog-to-github-by-travis-ci.html</guid><pubDate>Tue, 04 Mar 2014 09:49:24 GMT</pubDate></item><item><title>加速 FreeBSD Kernel 的編譯</title><link>http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;這幾天要開始 Build FreeBSD Kernel 了，
可是 buildworld 跟 buildkernel 都需要花費非常久的時間。&lt;/p&gt;
&lt;p&gt;因此想要研究一下是否能加速 FreeBSD Kernel 的編譯速度，
加快開發測試的流程，以及減少 CI 所需要花費的時間。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C</category><category>FreeBSD</category><guid>http://swind.code-life.info/posts/use_ccache_to_build_freebsd_kernel.html</guid><pubDate>Wed, 18 Sep 2013 06:00:09 GMT</pubDate></item><item><title>簡單易懂的 Python Plugin 架構 (大概 ...)</title><link>http://swind.code-life.info/posts/simple-python-plugin-framework.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;學習用 Python 寫測試工具快兩個星期了，主要使用 clime + ucltip 跟 pyinstaller。
可是目前遇到一個問題，當我使用 pyinstaller 將測試工具打包之後，
他會很貼心的幫你將所有 .py 檔包裝成一個可執行檔。
所以當我要任何新增 command 都必須要重新部屬那個執行檔，這樣實在非常的麻煩。&lt;/p&gt;
&lt;p&gt;因此才會開始嘗試是否有可能執行檔只包裝 clime, ucltip 以及我自己所提供的 API，
然後 command 的部份就利用 plugin 的方式來增加。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/simple-python-plugin-framework.html"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://swind.code-life.info/posts/simple-python-plugin-framework.html</guid><pubDate>Sun, 25 Aug 2013 07:26:12 GMT</pubDate></item><item><title>使用 Python 結合 C 在 Linux 發送 SCSI Command</title><link>http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;最近因為工作的需要，所以要撰寫很多 SCSI 相關的測試。
目前可以用的測試工具有 fio, iometer 以及一個自行開發的 SCSI Command 驗證的工具。
但是這些都是使用 C 撰寫的，所以要撰寫一些流程比較複雜的驗證時，就變得非常的麻煩。
絕對不是因為我想試試看 Python 或者是因為自行開發的驗證工具程式碼已經無法閱讀的原因，才想要重造輪子。&lt;/p&gt;
&lt;p&gt;Orz 而且我受夠了手動測試的生活了 ...&lt;/p&gt;
&lt;p&gt;所以想將測試運行的邏輯搬移到 Python 的部份，加速測試案例的開發速度。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>C/C++</category><category>Python</category><guid>http://swind.code-life.info/posts/send-scsi-command-from-python-on-linux.html</guid><pubDate>Sat, 03 Aug 2013 02:38:06 GMT</pubDate></item><item><title>CMake - add_custom_command</title><link>http://swind.code-life.info/posts/cmake-add_custom_command.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;最近因為必須要示範如何將公司的 autoconf 與 automake 轉成 CMake，所以稍微研究了一下之前完全沒有用過得 &lt;a class="reference external" href="http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_custom_command"&gt;add_custom_command&lt;/a&gt; 跟 &lt;a class="reference external" href="http://www.cmake.org/cmake/help/cmake2.6docs.html#command:add_custom_target"&gt;add_custom_target&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="symbolic-link"&gt;
&lt;h2&gt;建立 symbolic link&lt;/h2&gt;
&lt;p&gt;目前有一個需求是要建立 symbolic link 在某些特定的資料夾裡面。
由於 autotools 是可以直接使用 script 的語法，所以建立起來非常簡單。&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-1"&gt;&lt;/a&gt;install-exec-hook:
&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-2"&gt;&lt;/a&gt;     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path1
&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-3"&gt;&lt;/a&gt;     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path2
&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-4"&gt;&lt;/a&gt;     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path3
&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-5"&gt;&lt;/a&gt;     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path4
&lt;a name="rest_code_3d69a5afd82843d9a343330484953b47-6"&gt;&lt;/a&gt;     ln -fs &lt;span class="k"&gt;$(&lt;/span&gt;source_prefix&lt;span class="k"&gt;)&lt;/span&gt;/a &lt;span class="k"&gt;$(&lt;/span&gt;target_prefix&lt;span class="k"&gt;)&lt;/span&gt;/path5
&lt;/pre&gt;&lt;p&gt;這樣只要直接呼叫 make install-exec-hook 就可以建立 symbolic link 了。
但是如果要在 CMake 裡面作到一樣的事情要怎麼處理呢？&lt;/p&gt;
&lt;pre class="code cmake"&gt;&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;targets&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-2"&gt;&lt;/a&gt;    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path1&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-3"&gt;&lt;/a&gt;    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path2&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-4"&gt;&lt;/a&gt;    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path3&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-5"&gt;&lt;/a&gt;    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path4&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/path5&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-9"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;Create_symbolic_link&lt;/span&gt; &lt;span class="s"&gt;source&lt;/span&gt; &lt;span class="s"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-10"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;Add_custom_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-11"&gt;&lt;/a&gt;        &lt;span class="s"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-12"&gt;&lt;/a&gt;        &lt;span class="s"&gt;COMMAND&lt;/span&gt; &lt;span class="s"&gt;ln&lt;/span&gt; &lt;span class="s"&gt;-fs&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-14"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Endfunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-16"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;target&lt;/span&gt; &lt;span class="s"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-17"&gt;&lt;/a&gt;   &lt;span class="nb"&gt;Create_symbolic_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;source_prefix&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/a&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-18"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Endforeach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_de50a55068dc42c8925b8136b37ef0be-20"&gt;&lt;/a&gt;&lt;span class="nb"&gt;Add_custom_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;install-exec-hook&lt;/span&gt; &lt;span class="s"&gt;DEPENDS&lt;/span&gt; &lt;span class="o"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;因為 CMake 裡面沒有辦法像 shell script 一樣直接下指令，必須透過 Add_custom_command 或者是 Execute_process 等方式執行。
但是若又要跟 Target 建立相依性的話，似乎就一定得靠 Add_custom_command，因為他會設定一個 output file。
這樣就可以讓 Target 依賴這個檔案 ( 以我們的例子來說 Target 就是 install-exec-hook ) 來達到 make Target 就可以建立 symbolic link 的目的。&lt;/p&gt;
&lt;p&gt;閃死人不償命的組合 ...&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://dl.dropboxusercontent.com/u/15537823/Blog/banner-of-the-stars_2.jpg" src="https://dl.dropboxusercontent.com/u/15537823/Blog/banner-of-the-stars_2.jpg"&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;星たちよ&lt;/p&gt;
&lt;p&gt;汝の命短き眷族の望みを聞くがよい。&lt;/p&gt;
&lt;p&gt;我らの望みヽ&lt;/p&gt;
&lt;p&gt;それは&lt;/p&gt;
&lt;p&gt;汝の本降ちゆくを看取ること&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;</description><category>C/C++</category><category>CMake</category><guid>http://swind.code-life.info/posts/cmake-add_custom_command.html</guid><pubDate>Tue, 25 Jun 2013 11:20:46 GMT</pubDate></item><item><title>C 的 Thread Pool 筆記</title><link>http://swind.code-life.info/posts/c-thread-pool.html</link><dc:creator>Swind</dc:creator><description>&lt;div&gt;&lt;p&gt;最近被丟到 FreeBSD 跟 C 的世界裡面，沒有 Scala 的 Actor 可以用。
所以只好參考別人的 Thread Pool 來看一下，在 C 的世界裡面 Thread Pool 是怎麼實作的。&lt;/p&gt;
&lt;p&gt;首先先去 StackOverFlow 中尋找是否有人問過類似的問題&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation"&gt;Existing threadpool C implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;裡面有提到幾個 C Thread Pool 的實作範例與可參考的文件&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;&lt;a class="reference external" href="https://github.com/mbrossard/threadpool"&gt;threadpool-mbrossard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://people.clarkson.edu/~jmatthew/cs644.archive/cs644.fa2001/proj/locksmith/code/ExampleTest/"&gt;threadpool-jmatthew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sourceforge.net/projects/cthpool/"&gt;cthreadpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Pithikos/C-Thread-Pool"&gt;C-Thread-Pool&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我這邊是直接應該是會以 threadpool-mbrossard 作為第一個研究的版本，因為他一直有在維護。
而且作者就是 &lt;a class="reference external" href="http://stackoverflow.com/questions/6297428/existing-threadpool-c-implementation"&gt;Existing threadpool C implementation&lt;/a&gt; 的發文者，感覺他還蠻熱心的。&lt;/p&gt;
&lt;div class="section" id="threadpool"&gt;
&lt;h2&gt;threadpool&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A simple C thread pool implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently, the implementation:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Works with pthreads only, but API is intentionally opaque to allow
other implementations (Windows for instance).&lt;/li&gt;
&lt;li&gt;Starts all threads on creation of the thread pool.&lt;/li&gt;
&lt;li&gt;Reserves one task for signaling the queue is full.&lt;/li&gt;
&lt;li&gt;Stops and joins all worker threads on destroy.&lt;/li&gt;
&lt;/ul&gt;&lt;div class="figure"&gt;
&lt;object data="http://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg" type="image/svg+xml"&gt;
http://upload.wikimedia.org/wikipedia/commons/0/0c/Thread_pool.svg&lt;/object&gt;
&lt;/div&gt;
&lt;p&gt;from wikipedia&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thread-pool"&gt;
&lt;h2&gt;Thread Pool 的資料結構&lt;/h2&gt;
&lt;p&gt;首先 Thread Pool 要有的東西就是 job 或者是 task 讓 Thread 知道他們要做什麼事情。&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_698700eacf404ac2b495cd5de9deeb4a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_698700eacf404ac2b495cd5de9deeb4a-2"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_698700eacf404ac2b495cd5de9deeb4a-3"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_698700eacf404ac2b495cd5de9deeb4a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;所以只要有一個資料結構紀錄要執行的 function pointer 與要傳遞的參數即可。
接下來就是 Thread Pool 本身，他必須存放所有的 Thread 與 Job Queue&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-2"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;pthread_mutex_t&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-3"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;pthread_cond_t&lt;/span&gt; &lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-4"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-5"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-6"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;thread_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-7"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-8"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-9"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-10"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-11"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-12"&gt;&lt;/a&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d129df6f19104da99d6f0ea95dbffaca-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;這邊他使用了一個 pthread_t 的 pointer 來紀錄所有的 Thread，簡單來說就是一個 pthread_t 的 array，而 head, tail 就是紀錄 array 的 offset。
threadpool_task_t 也是一樣的原理，真是出乎意料的簡單。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;ThreadPool 的建立與工作的執行&lt;/h2&gt;
&lt;p&gt;再來就是 Thread Pool 的建立，由於剛剛提到的他其實是使用一個 pthread array 與一個 job array 來存放所有的 thread 與 jobs。
因此需要在一開始的時候就決定 Thread Pool 與 Jobs 的最大數量。&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_72df8d0ba1864fa9873765c68849ef99-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* Allocate thread and task queue */&lt;/span&gt;
&lt;a name="rest_code_72df8d0ba1864fa9873765c68849ef99-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;pthread_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thread_count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_72df8d0ba1864fa9873765c68849ef99-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;而每個 Thread 要執行的 Function 是&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;threadpool_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;threadpool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-2"&gt;&lt;/a&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-3"&gt;&lt;/a&gt;     &lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;threadpool_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;threadpool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-4"&gt;&lt;/a&gt;     &lt;span class="kt"&gt;threadpool_task_t&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-6"&gt;&lt;/a&gt;     &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-7"&gt;&lt;/a&gt;         &lt;span class="cm"&gt;/* Lock must be taken to wait on conditional variable */&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-8"&gt;&lt;/a&gt;         &lt;span class="n"&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-10"&gt;&lt;/a&gt;         &lt;span class="cm"&gt;/* Wait on condition variable, check for spurious wakeups.&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-11"&gt;&lt;/a&gt;&lt;span class="cm"&gt;            When returning from pthread_cond_wait(), we own the lock. */&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-12"&gt;&lt;/a&gt;         &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-13"&gt;&lt;/a&gt;             &lt;span class="n"&gt;pthread_cond_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-14"&gt;&lt;/a&gt;         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-16"&gt;&lt;/a&gt;         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;immediate_shutdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-17"&gt;&lt;/a&gt;            &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;graceful_shutdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-18"&gt;&lt;/a&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-19"&gt;&lt;/a&gt;             &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-20"&gt;&lt;/a&gt;         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-22"&gt;&lt;/a&gt;         &lt;span class="cm"&gt;/* Grab our task */&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-23"&gt;&lt;/a&gt;         &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-24"&gt;&lt;/a&gt;         &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-25"&gt;&lt;/a&gt;         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-26"&gt;&lt;/a&gt;         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-27"&gt;&lt;/a&gt;         &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-29"&gt;&lt;/a&gt;         &lt;span class="cm"&gt;/* Unlock */&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-30"&gt;&lt;/a&gt;         &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-32"&gt;&lt;/a&gt;         &lt;span class="cm"&gt;/* Get to work */&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-33"&gt;&lt;/a&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;))(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-34"&gt;&lt;/a&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-36"&gt;&lt;/a&gt;     &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;started&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-37"&gt;&lt;/a&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-38"&gt;&lt;/a&gt;     &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-39"&gt;&lt;/a&gt;     &lt;span class="n"&gt;pthread_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-40"&gt;&lt;/a&gt;     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2428160ea0074b7fb58336068eccc15f-41"&gt;&lt;/a&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;在 &lt;strong&gt;for(;;)&lt;/strong&gt; 裡面，Thread 第一件要做的事情就是去搶奪 pool 的 lock，當搶到 lock 的 Thread 發現沒有工作可以做的時候，
就會執行 pthread_cond_wait 來等待通知。這時候 pool-&amp;gt;lock 會被 Unlock，因此這時候其他 Thread 也可以進來這個區域。
所以在完全沒有工作的情況下，所有的 Thread 都會在這邊 Waiting。&lt;/p&gt;
&lt;p&gt;當 Thread 被透過 pthread_cond_signal 喚醒的時候，該 Thread 就會重新取得 pool-&amp;gt;lock。
這時他就可以安心的取出 queue 中的 task，等待取出完畢之後，再 unlock 讓其他被喚醒的 Thread 也可以去取得 Task。&lt;/p&gt;
&lt;p&gt;之後就是執行 task 中的 function pointer 做該做的工作。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="threadpool-destory"&gt;
&lt;h2&gt;ThreadPool 的 destory&lt;/h2&gt;
&lt;p&gt;destory 就更簡單了，只要使用 pthread_cond_broadcast 通知所有的 Thread 起來，由於 shoutdown 的確認會在執行工作之前。
所以該 thread 就會離開執行工作的迴圈，並且結束。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mbrossard/threadpool/blob/master/src/threadpool.c"&gt;mbrossard 完整的 ThreadPool 原始碼&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其實寫這篇筆記應該只是想貼這個&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg" src="https://dl.dropboxusercontent.com/u/15537823/Blog/%E7%94%9F%E5%AD%98%E6%88%B0%E7%95%A5.jpg"&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;生存戦略！&lt;/p&gt;
&lt;cite title="Source Title"&gt;輪るピングドラム&lt;/cite&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;</description><category>C</category><guid>http://swind.code-life.info/posts/c-thread-pool.html</guid><pubDate>Fri, 07 Jun 2013 13:43:28 GMT</pubDate></item></channel></rss>