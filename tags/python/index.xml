<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Corleonis</title>
    <link>https://swind.github.io/tags/python/index.xml</link>
    <description>Recent content in Python on Corleonis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <atom:link href="https://swind.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>使用 ADB 來監控 APP 的 CPU 使用量</title>
      <link>https://swind.github.io/post/android_cpu_usage_by_adb/</link>
      <pubDate>Tue, 26 Sep 2017 17:53:21 +0800</pubDate>
      
      <guid>https://swind.github.io/post/android_cpu_usage_by_adb/</guid>
      <description>&lt;p&gt;其實在 &lt;code&gt;Linux&lt;/code&gt; 上監控 CPU 的方法在 &lt;code&gt;Android&lt;/code&gt; 上面也可以用，並且這些方法在很多人的 Blog 與 StackOverflow 也被討論到爛掉了。
這邊主要是紀錄如何使用 &lt;code&gt;adb&lt;/code&gt; 與 &lt;code&gt;/proc&lt;/code&gt; 取得 &lt;code&gt;Process&lt;/code&gt; 與 &lt;code&gt;Thread&lt;/code&gt; 的 CPU 資訊。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;整體的-cpu-使用量&#34;&gt;整體的 CPU 使用量&lt;/h1&gt;

&lt;p&gt;要取得整個 Device 的 CPU 資訊的話，可以透過 &lt;code&gt;/proc/stat&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用指令 &lt;code&gt;adb shell cat /proc/stat&lt;/code&gt; 會看到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1286215 71763 779091 4271301 16007 9 16100 0 0 0
cpu0 560338 33626 409552 2845856 9346 0 12458 0 0 0
cpu1 80441 6912 40265 146206 1396 4 379 0 0 0
cpu2 174491 9981 89521 383939 1992 3 838 0 0 0
cpu3 470945 21244 239753 895300 3273 2 2425 0 0 0
intr 56252464 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11183406 0 0 0 0 0 0 0 0 0 0 0 0 0 165872 1 0 0 0 0 0 2426472 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2184 8 5 0 10 0 0 0 2025880 0 0 0 0 0 0 0 0 0 0 384654 0 0 0 0 5 689 3 2 3 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 2283211 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 91049 1142156 0 0 4891 0 0 0 0 60 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 632514 0 12 0 0 0 0 0 5607578 0 0 0 0 0 0 365 0 0 0 36028 5 0 2027914 2134764 0 0 0 0 0 0 0 0 0 2043721 0 5 0 0 0 0 748 263 0 0 0 1584739 0 0 75 0 0 0 0 0 0 0 0 0 0 0 0 11817 0 0 0 0 0 207 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7067 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 16 0 0 0 0 86 0 0 0 0 0 0 0 0 0 0 0 5062 481 1198 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 215 12 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ctxt 198100180
btime 1506325560
processes 344110
procs_running 1
procs_blocked 0
softirq 30624059 14285 6147433 22588 1777078 14285 14285 400466 3969871 2347 18261421
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;像密碼表一樣的資訊，不過我們可以只著重在第一行的 &lt;code&gt;cpu&lt;/code&gt; 即可。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1286215 71763 779091 4271301 16007 9 16100 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每個欄位代表的意思是&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;user&lt;/th&gt;
&lt;th&gt;nice&lt;/th&gt;
&lt;th&gt;system&lt;/th&gt;
&lt;th&gt;idle&lt;/th&gt;
&lt;th&gt;iowait&lt;/th&gt;
&lt;th&gt;irq&lt;/th&gt;
&lt;th&gt;softirq&lt;/th&gt;
&lt;th&gt;stealstolen&lt;/th&gt;
&lt;th&gt;guest&lt;/th&gt;
&lt;th&gt;guest_nice&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cpu&lt;/td&gt;
&lt;td&gt;1286215&lt;/td&gt;
&lt;td&gt;71763&lt;/td&gt;
&lt;td&gt;779091&lt;/td&gt;
&lt;td&gt;4271301&lt;/td&gt;
&lt;td&gt;16007&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;16100&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;這些數字都是從 Device 啟動之後的累計值, 單位是 &lt;code&gt;jiffies&lt;/code&gt;，
因此計算在某段時間內的值的話。
就必須在起始跟結束的時候都呼叫一次 &lt;code&gt;adb shell cat /proc/stat&lt;/code&gt;，
並且把所有得到的數字相減。&lt;/p&gt;

&lt;p&gt;例如&lt;/p&gt;

&lt;p&gt;開始的時候取得&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1430106 74780 838424 4391260 16309 9 16780 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;結束的時候取得&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cpu  1431109 74806 838854 4392567 16313 9 16783 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那麼這段時間總共是 &lt;code&gt;2773 jiffies&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# after - before
(1431109 + 74806 + 838854 + 4392567 + 16313 + 9 + 16783 + 0 + 0 + 0) - (1430106 + 74780 + 838424 + 4391260 + 16309 + 9 + 16780 + 0 + 0 + 0) 
= 2773
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;process-的-cpu-使用率&#34;&gt;Process 的 CPU 使用率&lt;/h1&gt;

&lt;p&gt;有了整體之後，再來就是針對 &lt;code&gt;Process&lt;/code&gt; , 計算 &lt;code&gt;Process&lt;/code&gt; 之前需要先取得 &lt;code&gt;Process&lt;/code&gt; 的 &lt;code&gt;PID&lt;/code&gt;。
最簡單的方法就是使用 &lt;code&gt;ps&lt;/code&gt; 來取得。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell ps | grep {package name}

u0_a174   11458 460   1781352 365668 sys_epoll_ 00000000 S com.android.chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二個 &lt;code&gt;11458&lt;/code&gt; 就是 &lt;code&gt;PID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有了 PID 之後, 就可以透過 &lt;code&gt;/proc/{PID}/stat&lt;/code&gt; 取得 Process 的 CPU 使用時間&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell cat /proc/11458/stat

11458 (mosa.puffinFree) S 460 460 0 0 -1 4194624 13380248 0 334 0 120663 47337 0 0 16 -4 133 0 9367583 1535365120 62981 4294967295 1 1 0 0 0 0 4612 0 38648 4294967295 0 0 17 3 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Process 的資料量明顯的多很多，可以參考 &lt;a href=&#34;http://man7.org/linux/man-pages/man5/proc.5.html&#34;&gt;PROC(5)&lt;/a&gt; 中的 &lt;code&gt;/proc/[pid]/stat&lt;/code&gt; 來取得每個欄位的意思。
這邊我們只要注意第 14 跟第 15 個。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; (14) utime  %lu
        Amount of time that this process has been scheduled
        in user mode, measured in clock ticks (divide by
        sysconf(_SC_CLK_TCK)).  This includes guest time,
        guest_time (time spent running a virtual CPU, see
        below), so that applications that are not aware of
        the guest time field do not lose that time from
        their calculations.

(15) stime  %lu
        Amount of time that this process has been scheduled
        in kernel mode, measured in clock ticks (divide by
        sysconf(_SC_CLK_TCK)).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;將這兩個值相加就是 &lt;code&gt;到目前為止&lt;/code&gt; Process 所使用的 CPU 時間。
所以跟前面一樣，需要在開始與結束各取一次，並且&lt;strong&gt;相減&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;thread&#34;&gt;Thread&lt;/h1&gt;

&lt;p&gt;在 &lt;code&gt;/proc/{PID}/task&lt;/code&gt; 底下會有一堆名稱是數字的資料夾&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell ls /proc/11458/task

10143
11458
11463
11465
11466
11468
.
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每個數字都是這個 Process 底下 Thread 的 &lt;code&gt;tid&lt;/code&gt;, 在這些資料夾裡面也有一個 &lt;code&gt;stat&lt;/code&gt; 的檔案。
所以跟 Process 一樣只要使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adb shell cat /proc/11458/task/10143/stat

10143 (OkHttp Connecti) S 460 460 0 0 -1 4194368 267 0 0 0 0 1 0 0 20 0 129 0 9491883 1599287296 67669 4294967295 1 1 0 0 0 0 4612 0 38648 4294967295 0 0 -1 3 0 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就會取得跟 Process 一樣格式的內容，我們一樣需要注意 &lt;code&gt;utime&lt;/code&gt; 與 &lt;code&gt;stime&lt;/code&gt; 但是除此之外還需要注意一個部份。
就是第一個欄位的 tid &lt;code&gt;10143&lt;/code&gt; 與 thread name &lt;code&gt;(OkHttp Connecti)&lt;/code&gt;。
由於 thread name 可能會重複，但是 tid 會不相同，所以最好是將 tid 與 thread name 合成一個 key 比較不容易統計錯誤。&lt;/p&gt;

&lt;p&gt;將這兩個值相加就是 &lt;code&gt;到目前為止&lt;/code&gt; Thread 所使用的 CPU 時間。
所以跟前面一樣，需要在開始與結束各取一次，並且&lt;strong&gt;相減&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;cpu-使用率&#34;&gt;CPU 使用率&lt;/h1&gt;

&lt;p&gt;就將前面透過 &lt;code&gt;/proc/stat&lt;/code&gt; 取得的值當分母，去計算 Process 與個 Thread 的百分比就可以了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 devpi 建立私有的 pypi server</title>
      <link>https://swind.github.io/post/devpi/</link>
      <pubDate>Wed, 20 Sep 2017 11:16:26 +0800</pubDate>
      
      <guid>https://swind.github.io/post/devpi/</guid>
      <description>

&lt;p&gt;簡短作個筆記&lt;/p&gt;

&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Swind/docker-devpi&#34;&gt;docker-devpi&lt;/a&gt; fork 自 &lt;a href=&#34;https://github.com/saily/openshift-devpi&#34;&gt;saily/openshift-devpi&lt;/a&gt;
不過如果可以的話我希望有機會可以改用 &lt;code&gt;alpine&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;FROM python:3.6

ENV DEVPI_SERVERDIR=/mnt/server \
    DEVPI_CLIENTDIR=/mnt/client \
    DEVPI_MIRROR_CACHE_EXPIRY=86400

COPY [&amp;quot;requirements.txt&amp;quot;, &amp;quot;logger_cfg.json&amp;quot;, &amp;quot;run.sh&amp;quot;, &amp;quot;/&amp;quot;]

RUN pip install --no-cache-dir -r /requirements.txt &amp;amp;&amp;amp; \
    rm /requirements.txt

VOLUME /mnt
EXPOSE 3141

CMD &amp;quot;/run.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CMD 所執行的 &lt;code&gt;run.sh&lt;/code&gt; 在 repository 裡面有。&lt;/p&gt;

&lt;h1 id=&#34;pip-conf&#34;&gt;pip.conf&lt;/h1&gt;

&lt;p&gt;將&lt;code&gt;ip&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; 與 &lt;code&gt;path&lt;/code&gt; 替換成自家 server 的位置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-config&#34;&gt;[global]
index-url = http://{ip}:{port}/{path}/+simple/
trusted-host = {ip} 

[search]
index = http://{ip}:{port}/cloudmosa/dev/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>python-zeroconf 範例</title>
      <link>https://swind.github.io/post/python-zeroconf/</link>
      <pubDate>Mon, 11 Sep 2017 13:55:48 +0800</pubDate>
      
      <guid>https://swind.github.io/post/python-zeroconf/</guid>
      <description>&lt;h1 id=&#34;zeroconf&#34;&gt;zeroconf&lt;/h1&gt;

&lt;p&gt;zeroconf ( Zero configuration networking )，主要透過 mDNS ( Multicast DNS ) 與 DNS-SD ( DNS Service Discovery ) 來實現。
而 &lt;a href=&#34;https://github.com/jstasiak/python-zeroconf&#34;&gt;python-zeroconf&lt;/a&gt; 就是 &lt;code&gt;zeroconf&lt;/code&gt; 的 &lt;strong&gt;純 Python&lt;/strong&gt; 實現。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;在 Apple 的機器上的實做就是 &lt;code&gt;Bonjour&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而 Linux 則是 &lt;code&gt;Avachi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;關於 &lt;code&gt;zeroconf&lt;/code&gt; 詳細的介紹可以參考 &lt;a href=&#34;http://bbs.mico.io/card/1236&#34;&gt;设备发现之Bonjour协议原理分享&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;server&#34;&gt;Server&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;python-zeroconf&lt;/code&gt; 的 &lt;code&gt;README.md&lt;/code&gt; 裡面雖然沒有提到 &lt;code&gt;mDNS&lt;/code&gt; 的部份，但是其實在 &lt;a href=&#34;https://github.com/jstasiak/python-zeroconf/blob/master/examples/registration.py&#34;&gt;examples&lt;/a&gt;
有個簡單的範例。&lt;/p&gt;

&lt;p&gt;下面是稍微整理一下 &lt;code&gt;examples&lt;/code&gt; 裡面的範例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from zeroconf import ServiceInfo, Zeroconf
import socket

import logging 

logger = logging.getLogger(__name__)

class Server:
    def __init__(self, name, address, port, desc):
        self.zeroconf = Zeroconf()
        self.name = name

        desc = {
            &#39;description&#39;: desc 
        }

        self.info = ServiceInfo(type_=&amp;quot;_http._tcp.local.&amp;quot;,
                           name=&amp;quot;{}._http._tcp.local.&amp;quot;.format(name),
                           address=socket.inet_aton(address), 
                           port=port, 
                           weight=0, 
                           priority=0, 
                           properties=desc)


    def register(self):
        self.zeroconf.register_service(self.info)

    def unregister(self):
        self.zeroconf.unregister_service(self.info)

    def close(self):
        self.zeroconf.close()


if __name__ == &amp;quot;__main__&amp;quot;:
    server = Server(
        name=&amp;quot;_testwebsite&amp;quot;, 
        address=&amp;quot;127.0.0.1&amp;quot;,
        port=9999, 
        desc=&amp;quot;0.0.1&amp;quot;)

    server.register()

    import time
    try:
        time.sleep(600)
    except KeyboardInterrupt:
        pass
    finally:
        server.unregister()
        server.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主要要看的就只有 &lt;code&gt;ServiceInfo&lt;/code&gt; 跟呼叫 &lt;code&gt;zeroconf.register_service&lt;/code&gt; 的部份而已&lt;/p&gt;

&lt;h1 id=&#34;client&#34;&gt;Client&lt;/h1&gt;

&lt;p&gt;Client 的部份一樣有 &lt;a href=&#34;https://github.com/jstasiak/python-zeroconf/blob/master/examples/browser.py&#34;&gt;examples&lt;/a&gt; 可以參考。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from zeroconf import ServiceBrowser, ServiceStateChange, Zeroconf
from threading import Event
import socket
import time

import logging
logger = logging.getLogger(&amp;quot;chatroom&amp;quot;)

class Service:
    ADDED = &amp;quot;added&amp;quot;
    REMOVED = &amp;quot;removed&amp;quot;

    def __init__(self, zeroconf, service_type, name, state_change):
        self.state = None
        self.name = name
        self.zeroconf = zeroconf

        self._update_info(service_type, name)
        self._state_change(state_change)

    def _update_info(self, service_type, name):
        info = self.zeroconf.get_service_info(service_type, name)

        self.address = socket.inet_ntoa(info.address)
        self.port = info.port

        self.weight = info.weight
        self.priority = info.priority

        self.server_name = info.server

        if info.properties:
            self.version = info.properties.get(&amp;quot;version&amp;quot;)
        else:
            self.version = None

    def __str__(self):
        return &amp;quot;[{}] {}:{} {}&amp;quot;.format(self.state, self.address, self.port, self.name)


    def _state_change(self, state_change):
        if state_change is ServiceStateChange.Added:
            self.state = self.ADDED
        elif state_change is ServiceStateChange.Removed:
            self.state = self.REMOVED


class Browser:
    def __init__(self):
        self.zeroconf = Zeroconf()
        self.handlers = []

        self.services = {}

    def list(self):
        return self.services.values()

    def get(self, name):
        return self.services.get(name)

    def wait(self, name):
        event = Event()

        def wait_handler(service):
            if name == service.name:
                event.set()
                self.unregister_handler(wait_handler)

        self.register_handler(wait_handler)

        if name in self.services:
            event.set()
            self.unregister_handler(wait_handler)

        return event

    def handler(self, zeroconf, service_type, name, state_change):
        service = Service(zeroconf, service_type, name, state_change)

        if service.state == service.ADDED:
            self.services[name] = service
        else:
            del self.services[name]

        for handler in self.handlers:
            handler(service)

    def register_handler(self, handler):
        self.handlers.append(handler)

    def unregister_handler(self, handler):
        self.handlers.remove(handler)

    def start(self):
        self.browser = ServiceBrowser(self.zeroconf, &amp;quot;_tcp.local.&amp;quot;, handlers=[self.handler])

    def close(self):
        self.zeroconf.close()

if __name__ == &amp;quot;__main__&amp;quot;:
    browser = Browser()

    def handler(state):
        print(state)

    browser.register_handlers(handler)
    browser.start()

    time.sleep(600)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比較不一樣的是，&lt;code&gt;ServiceBrowser&lt;/code&gt; 會建立一個 &lt;code&gt;Thread&lt;/code&gt; 去取得資訊，並且當有 state 變化的時候（ADDED 或 REMOVED) 時，呼叫註冊的 handlers。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建立可以執行 python3 與 adb 指令的 docker images</title>
      <link>https://swind.github.io/post/docker-python3-adb/</link>
      <pubDate>Wed, 12 Apr 2017 14:40:30 +0800</pubDate>
      
      <guid>https://swind.github.io/post/docker-python3-adb/</guid>
      <description>&lt;h2 id=&#34;python3-adb&#34;&gt;Python3 + adb&lt;/h2&gt;

&lt;p&gt;這個 Image 使用 Alpine Linux Image 安裝了 Python3 與 ADB。
整體大小約 9x MB，用於執行 Python3 撰寫的 Android 測試。&lt;/p&gt;

&lt;p&gt;整個 &lt;code&gt;Dockerfile&lt;/code&gt; 是各家 Dockerfile 的大雜燴。感謝&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/frol/docker-alpine-python3&#34;&gt;frol/docker-alpine-python3&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sorccu/docker-adb&#34;&gt;sorccu/docker-adb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cdrx/docker-pyinstaller&#34;&gt;cdrx/docker-pyinstaller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;原始碼與-docker-image&#34;&gt;原始碼與 Docker Image&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Swind/docker-python3-adb&#34;&gt;Github: swind/docker-python3-adb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/swind/docker-python3-adb&#34;&gt;Docker-Hub: swind/docker-python3-adb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;使用方式&#34;&gt;使用方式&lt;/h3&gt;

&lt;h4 id=&#34;執行-adb&#34;&gt;執行 ADB&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -ti --net host swind/docker-python3-adb adb devices
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;sorccu/docker-adb&lt;/code&gt; 的 container 內容本來是預設會啟動 &lt;code&gt;adb server&lt;/code&gt;，但這部份被我拿掉了。
因為我想讓 container 內的 adb 可以直接跟 Host 的 adb server 溝通。
所以在執行的時候要增加 &lt;code&gt;--net host&lt;/code&gt; 讓 container 內的 adb 與 Host 的 adb server 可以直接連線。&lt;/p&gt;

&lt;h4 id=&#34;執行-python3-程式&#34;&gt;執行 Python3 程式&lt;/h4&gt;

&lt;p&gt;使用這個 image 進行 build 的時候，會自動載入 &lt;code&gt;requirements.txt&lt;/code&gt; 並且安裝（也就是 Dockerfile 中 &lt;code&gt;ONBUILD&lt;/code&gt; 的部份）。
並且在執行的時候預設 &lt;code&gt;WORKDIR&lt;/code&gt; 的路徑是 &lt;code&gt;/code&lt;/code&gt;，所以需要使用 &lt;code&gt;-v&lt;/code&gt; 將要執行的 Python project 掛載到 &lt;code&gt;/code&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -v &amp;quot;$(pwd):/code&amp;quot; --rm -ti --net host swind/docker-python3-adb python3 helloworld.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
print(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;license&#34;&gt;License&lt;/h4&gt;

&lt;p&gt;See &lt;a href=&#34;LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>