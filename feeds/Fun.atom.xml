<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Corleonis</title><link href="http://Swind.github.com/" rel="alternate"></link><link href="http://Swind.github.com/feeds/Fun.atom.xml" rel="self"></link><id>http://Swind.github.com/</id><updated>2012-12-09T00:00:00+08:00</updated><entry><title>Golang - Goroutine 筆記 (1)</title><link href="http://Swind.github.com/golang-goroutine-bi-ji-1.html" rel="alternate"></link><updated>2012-12-09T00:00:00+08:00</updated><author><name>Swind</name></author><id>tag:Swind.github.com,2012-12-09:golang-goroutine-bi-ji-1.html</id><summary type="html">&lt;p&gt;順便 Release &lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go/downloads"&gt;EPUBConverter 0.0.3&lt;/a&gt; (其實只是讓他變成可以平行處理而已 Orz)&lt;/p&gt;
&lt;div class="section" id="golang-goroutine"&gt;
&lt;h2&gt;Golang 中的 goroutine&lt;/h2&gt;
&lt;p&gt;會想到用這個是由於 EPUBConverter Go 的版本雖然運作上已經比 Scala 版本快上不少了。
但我發現在執行的時候 CPU 使用率一直都只有 25 %，所以才想試試看使用 goroutine 看能不能讓他轉換更快一點。&lt;/p&gt;
&lt;p&gt;依照文件所說，在執行 IO 相關動作的時候，會將 CPU 讓給 goroutine 來使用，那麼對於 EPUBConverter 的效能應該會有顯著的提昇。&lt;/p&gt;
&lt;p&gt;雖然有人說 goroutine 跟 Scala 的 actor 有點像，但是 actor 的模型就很具體跟明確。
而 goroutine 則是提供一個方便快速的 thread 操作方式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goroutine"&gt;
&lt;h2&gt;goroutine 的使用方式&lt;/h2&gt;
&lt;p&gt;goroutine 的使用非常簡單，只要在呼叫 function 的時候在前面加上 go 就可以了。&lt;/p&gt;
&lt;blockquote&gt;
go func()&lt;/blockquote&gt;
&lt;p&gt;至於要跟 goroutine 的溝通則是使用 channel。&lt;/p&gt;
&lt;p&gt;channel 目前我使用的感覺很像是 java 中的 blocking queue。
他的宣告方式只要在一般宣告的時候加個 &lt;strong&gt;chan&lt;/strong&gt; 的關鍵字就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣就可以透過 &amp;lt;- 賦值與取值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//將 i assign 給 count&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="c1"&gt;//從 count 取出值&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而要決定 channel 可以放的數量則是可以透過&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;的方式來決定。&lt;/p&gt;
&lt;p&gt;以上面的程式碼為例子，當 count 裡面沒有東西時，使用 &amp;lt;- count 會 block 住直到有值寫入。
而使用 count &amp;lt;- 的時候當裡面的值超過 4 個的時候，則會 block 住無法寫入，直到有值被取出。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;goroutine 的設定&lt;/h2&gt;
&lt;p&gt;雖然後來使用了 goroutine 讓每一個 EPUB 電子書的轉換都可以平行處理，
但是我發現 CPU 使用率卻依然只有 25 %。&lt;/p&gt;
&lt;p&gt;後來才發現是還要再設定 GOMAXPROCS 來讓 Go 知道要用幾個核心。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//透過 runtime.NumCPU() 取得 CPU 核心數&lt;/span&gt;
&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GOMAXPROCS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumCPU&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣就終於看得到 CPU 使用率到 100% 了 ...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="golang-benchmark"&gt;
&lt;h2&gt;Golang 的 benchmark 測試&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://golang.org/pkg/testing/"&gt;testing package&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Go 另外一點讓我還蠻喜歡的就是，他的設計非常的實用。
雖然還沒有很完整，但是一般開發常用的東西他都會幫你想到。
例如寫在 test case 內的 benchmark。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;runtime&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;BenchmarkConvertCore4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 4 代表使用的核心數&lt;/span&gt;
        &lt;span class="n"&gt;executeConvert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./testdata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;測試結果&lt;/p&gt;
&lt;p&gt;使用四核心&lt;/p&gt;
&lt;blockquote&gt;
BenchmarkConvertCore4          1        9775559100 ns/op
ok      epubconverter   10.282s&lt;/blockquote&gt;
&lt;p&gt;使用單核&lt;/p&gt;
&lt;blockquote&gt;
BenchmarkConvertCore1          1        33146895900 ns/op
ok      epubconverter   33.673s&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Go"></category></entry><entry><title>EPUBConverter 0.0.2 - 其實已經重寫了 Orz</title><link href="http://Swind.github.com/epubconverter-002-qi-shi-yi-jing-zhong-xie-liao-orz.html" rel="alternate"></link><updated>2012-12-08T00:00:00+08:00</updated><author><name>Swind</name></author><id>tag:Swind.github.com,2012-12-08:epubconverter-002-qi-shi-yi-jing-zhong-xie-liao-orz.html</id><summary type="html">&lt;div class="section" id="epubconverter-0-0-2"&gt;
&lt;h2&gt;EPUBConverter 0.0.2&lt;/h2&gt;
&lt;p&gt;一開始的 Scala 版本本來是自己寫來自己用的小工具，可是沒想到竟然有人有用還有回報問題。
大受感動之餘（誤），而出現了這個全新感受的 EPUBConverter 0.0.2，絕對不是因為手癢想要試試看 Go。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go/downloads"&gt;EPUBConverter 0.0.2 下載&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go"&gt;EPUBConverter Source Code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;這個版本比之前好得地方在於，這次使用了 &lt;a class="reference external" href="http://tongwen.openfoundry.org/"&gt;新同文堂&lt;/a&gt; 的簡繁轉換對照表。
除了單字轉換之外，還多了一個詞彙轉換。&lt;/p&gt;
&lt;p&gt;所以轉換品質應該會比之前 Scala 的版本好很多，感謝新同文堂分享對照表。
他的 Bookmarklet 版本也非常好用，基本上我 Go 的轉換邏輯就是從 Bookmarklet 版本移植過來的。&lt;/p&gt;
&lt;p&gt;但是由於我直接將對照表轉換成 Golang 裡面的 map 了，所以這次就沒有辦法讓使用者自己改對照表了。&lt;/p&gt;
&lt;p&gt;不過有興趣的人，在原始碼的 &lt;a class="reference external" href="https://github.com/Swind/EPUBConverter-Go/tree/master/tongwen_table"&gt;tongwen_table&lt;/a&gt; 資料夾底下，我有放了一個簡單的轉換工具。
可以利用那個重新產生 Go 的 map，但是最後還是得重新編譯整個 EPUBConverter 就是了。&lt;/p&gt;
&lt;p&gt;延續之前的我的偷懶寫法，這次也是寫死只會轉換 source 資料夾底下的 epub 檔案，輸出到 target 資料夾。
可是這次全部都在記憶體裡面處理，所以不會先解壓縮到磁碟上然後壓縮再刪除了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/EPUBConverter
           source
           target
           epubconverter.exe
&lt;/pre&gt;
&lt;p&gt;以上，如果有什麼問題的話也歡迎回覆，如果我有錢有閒而且沒事做的話 Orz。
會找個時間繼續修正的，雖然目前我也想不到要加啥功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="go"&gt;
&lt;h2&gt;Go 的心得&lt;/h2&gt;
&lt;p&gt;其實這段才是本文 Orz。
這次寫 Go 我是使用 &lt;a class="reference external" href="http://www.sublimetext.com/2"&gt;Sublime Text 2&lt;/a&gt; 來作為我的編輯器。
雖然萬能的 Elcipse 也有支援，但是我現在是能不用就不用，他真的太肥了。&lt;/p&gt;
&lt;p&gt;Go 的設計讓我覺得他非常的務實，考慮到現在 Coding 的需求。
例如自己就有包涵 gofmt 這個 format 工具，並且可以使用 go install 來安裝 remote respository 的 package。&lt;/p&gt;
&lt;p&gt;至少免去了每次要學一個新語言，就必須東找西找各式各樣工具來進行整合。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Go 的語法紀錄&lt;/h2&gt;
&lt;p&gt;這一次寫得時候還沒有把 Go 的語法看完，所以有很多都是亂用的，並且把 Go 當 C 在寫 Orz。&lt;/p&gt;
&lt;div class="section" id="for"&gt;
&lt;h3&gt;for 迴圈&lt;/h3&gt;
&lt;p&gt;寫習慣了 Scala，看到 for 迴圈就很自然的會去找是否有 for-each 的語法。
在 Go 裡面如果要尋訪 slice 或 map 等容器裡面的每一個元素，使用的是 for + range&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由於 Go 支援多個回傳值，所以 for 後面的 &lt;strong&gt;index&lt;/strong&gt; 與 &lt;strong&gt;element&lt;/strong&gt; 是會隨著 range 後面所接的對象而改變的。
例如是 map 的話，那麼回傳值就會是 key, value。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;函式與變數的名稱&lt;/h3&gt;
&lt;p&gt;大寫開頭的就是可以在其他 package 被呼叫，小寫得就只能在自己的 package 裡面被呼叫。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;讀檔與寫檔&lt;/h3&gt;
&lt;p&gt;先來段程式碼&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 C、C++、Java、Scala 等語言基本上在 Write 的 function 中，都會有一個參數是用來帶要寫的長度。
可是 Go 沒有 T_T，所以這段程式碼在剛寫好得時候寫了一堆垃圾資料進去。因為每次都把整個 buffer 寫入。&lt;/p&gt;
&lt;p&gt;一直到去 stackoverflow 查詢才發現，原來要善用&lt;/p&gt;
&lt;blockquote&gt;
part[:length]&lt;/blockquote&gt;
&lt;p&gt;這樣的語法來取出 slice 中特定的某段區域。
更詳細的 slice 內容可以參考 &lt;a class="reference external" href="http://blog.golang.org/2011/01/go-slices-usage-and-internals.html"&gt;Go Slices - usage and internals&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;剩下的之後有想到再補上，不過 Go 寫起來也蠻愉快的，我想以後用 Scala 跟 Go 的時間應該會一半一半了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Go"></category></entry></feed>