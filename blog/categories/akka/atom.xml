<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Akka | Corleonis]]></title>
  <link href="http://Swind.github.com/blog/categories/akka/atom.xml" rel="self"/>
  <link href="http://Swind.github.com/"/>
  <updated>2012-06-18T21:16:34+08:00</updated>
  <id>http://Swind.github.com/</id>
  <author>
    <name><![CDATA[Swind]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Akka 2.0 筆記(6) - Dispatcher 的設定]]></title>
    <link href="http://Swind.github.com/blog/2012/06/17/akka-note-6-my-aggregator/"/>
    <updated>2012-06-17T20:19:00+08:00</updated>
    <id>http://Swind.github.com/blog/2012/06/17/akka-note-6-my-aggregator</id>
    <content type="html"><![CDATA[<p>今天早上先簡單了依照昨天畫得架構圖做了一個雛型，整個跑起來功能是以了，但是流程整個悲劇 Orz ...
先是 Exception Handling 做的不夠好，結果就真的是 "Let it Crash" 一直死一直死一直死，好像在玩 D3 的煉獄模式一樣。</p>

<p>再來是我沒有去設定 Dispatcher 所以 Thread 用了十幾個。如果我沒有看錯的話，依照 Akka <a href="https://github.com/akka/akka/blob/master/akka-actor/src/main/resources/reference.conf">reference.conf</a> 的設定，
 Default Dispatcher 使用 fork-join-executor，他的預設設定如下</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">fork</span><span class="o">-</span><span class="n">join</span><span class="o">-</span><span class="n">executor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">#</span> <span class="nc">Min</span> <span class="n">number</span> <span class="n">of</span> <span class="n">threads</span> <span class="n">to</span> <span class="n">cap</span> <span class="n">factor</span><span class="o">-</span><span class="n">based</span> <span class="n">parallelism</span> <span class="n">number</span> <span class="n">to</span>
</span><span class='line'>  <span class="n">parallelism</span><span class="o">-</span><span class="n">min</span> <span class="k">=</span> <span class="mi">8</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">#</span> <span class="nc">Parallelism</span> <span class="o">(</span><span class="n">threads</span><span class="o">)</span> <span class="o">...</span> <span class="n">ceil</span><span class="o">(</span><span class="n">available</span> <span class="n">processors</span> <span class="o">*</span> <span class="n">factor</span><span class="o">)</span>
</span><span class='line'>  <span class="n">parallelism</span><span class="o">-</span><span class="n">factor</span> <span class="k">=</span> <span class="mf">3.0</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">#</span> <span class="nc">Max</span> <span class="n">number</span> <span class="n">of</span> <span class="n">threads</span> <span class="n">to</span> <span class="n">cap</span> <span class="n">factor</span><span class="o">-</span><span class="n">based</span> <span class="n">parallelism</span> <span class="n">number</span> <span class="n">to</span>
</span><span class='line'>  <span class="n">parallelism</span><span class="o">-</span><span class="n">max</span> <span class="k">=</span> <span class="mi">64</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>很簡單的 parallelism-min 與 parallelism-max 的值代表著 Thread 的上下限，那麼 parallelism_factor 呢？</p>

<p>他同樣也是限制 Thread 的上限，上限的計算方式為</p>

<pre><code>  parallelism-factor * 你的處理器核心數
</code></pre>

<p>所以我的四核心桌機使用這個 Dispatcher 最多會開到 12 個 Thread Orz ...</p>

<p>難怪我的 Thread 會滿天飛了</p>

<!--more-->


<p>這邊我要先搞定我之前一直逃避的 Akka 設定檔，之前會逃避是因為我用 Eclipse 的 ScalaIDE 加上 sbt 來開發。
不知道為什麼之前設定檔在 build 的時候一直不會自動放到編譯完成的目錄下面，所以就整個怒完全不想搞設定檔這種東西。
那時候是偷懶直接寫在程式碼裡面。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Dispatcher設定檔 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'> <span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="s">&quot;&quot;&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;my-dispatcher {</span>
</span><span class='line'><span class="s">  # Dispatcher is the name of the event-based dispatcher</span>
</span><span class='line'><span class="s">  type = Dispatcher</span>
</span><span class='line'><span class="s">  # What kind of ExecutionService to use</span>
</span><span class='line'><span class="s">  executor = &quot;fork-join-executor&quot;</span>
</span><span class='line'><span class="s">  # Configuration for the fork join pool</span>
</span><span class='line'><span class="s">  fork-join-executor {</span>
</span><span class='line'><span class="s">    # Min number of threads to cap factor-based parallelism number to</span>
</span><span class='line'><span class="s">    parallelism-min = 2</span>
</span><span class='line'><span class="s">    # Parallelism (threads) ... ceil(available processors * factor)</span>
</span><span class='line'><span class="s">    parallelism-factor = 2.0</span>
</span><span class='line'><span class="s">    # Max number of threads to cap factor-based parallelism number to</span>
</span><span class='line'><span class="s">    parallelism-max = 10</span>
</span><span class='line'><span class="s">  }</span>
</span><span class='line'><span class="s">  # Throughput defines the maximum number of messages to be</span>
</span><span class='line'><span class="s">  # processed per actor before the thread jumps to the next actor.</span>
</span><span class='line'><span class="s">  # Set to 1 for as fair as possible.</span>
</span><span class='line'><span class="s">  throughput = 1</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;MySystem&quot;</span><span class="o">,</span><span class="nc">ConfigFactory</span><span class="o">.</span><span class="n">load</span><span class="o">(</span><span class="n">customConf</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面把設定檔內容直接儲存成字串，然後用 ConfigFactory.load 就可以產生設定檔了，不過一直放在程式碼裡面也不是一件健康的事情。
所以還是花了一點時間處理之前在 Eclipse 上面遇到的問題。</p>

<p>不過俗話說得好，越難找的 Bug 越蠢 ... 我又再次驗證了這個道理 Orz</p>

<p>如果你是使用 sbt 上面的 sbt-eclipse 來建立 Eclipse Project，由於 plugin 不貼心或者很貼心的設計，他在 Eclipse 裡面並不會幫你建立 resources 的 source folder，
所以請手動在 src/main 下面建立一個 resources 的 source folder。</p>

<p>接著是<del>笨點</del>重點，請進入 Project 的設定畫面，然後選擇 Java Build Path 的內 Source 的 Tab。
請將 <strong>src/main/resources</strong> 的 <strong>Output folder</strong> 的路徑設定的跟 src/main/scala 一樣。</p>

<p><img src="https://dl.dropbox.com/u/15537823/Blog/Akka%202.0%20%E7%AD%86%E8%A8%98%286%29%20-%20Dispatcher%20%E7%9A%84%E8%A8%AD%E5%AE%9A/Eclipse_Setting.png"></p>

<p>之前都沒有部屬到我想要得地方就是因為他是放到 default output folder 也就是 bin 底下 Orz。</p>

<p>之後就可以參考 <a href="http://doc.akka.io/docs/akka/2.0.1/general/configuration.html">Configure</a> 與 <a href="http://doc.akka.io/docs/akka/2.0.2/scala/dispatchers.html">Dispatcher</a> 的內容去設定了。</p>

<p>這樣就解決了我之前一直懶得找得問題，再來應該就會詳細設定一下 Scatter-Gather 所要用的 Dispatcher 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka 2.0 筆記(5) - Scatter Gather]]></title>
    <link href="http://Swind.github.com/blog/2012/06/15/akka-note-5-aggregator/"/>
    <updated>2012-06-15T08:58:00+08:00</updated>
    <id>http://Swind.github.com/blog/2012/06/15/akka-note-5-aggregator</id>
    <content type="html"><![CDATA[<p>繼上次完全看不懂的 Dataflow 之後，我還是想要一個 Akka 的 Scatter Gather 實作方式，因此想試著自己實做看看。</p>

<p>下圖是 <a href="http://www.eaipatterns.com/">Enterprise Integration Patterns</a> 書中的 Scatter-Gather 概念圖。</p>

<p><img src="http://www.eaipatterns.com/img/BroadcastAggregate.gif"></p>

<p>從圖中可以發現，中間對於 Vendor A、B 與 C 進行 Broadcast 的行為跟 Akka 內的 <a href="http://doc.akka.io/docs/akka/2.0/scala/routing.html">Router</a> 很像，
所以當我正在思考 Router 是否合適作為這種用途的時候，我想到了 <a href="http://letitcrash.com/">Let it Crash</a> 裡面 <a href="http://letitcrash.com/post/23532935686/watch-the-routees">Watch the Routees</a> 這篇文章。</p>

<p>這篇文章裡面他紀錄了在 Akka mailinglist 中回答別人問題時所寫的範例程式。</p>

<blockquote><p>整個 use case 是要執行一個 Job，這個 Job 由許多 Tasks 組成，在執行的過程中，會將這些 Tasks 透過 router 分派給 worker actors 執行。
最後收集所有 worker 的執行結果，並且將他們合併之後回傳。
除此之外， worker 在執行過程中發生錯誤時，應該要進行 retry，在進行幾次 retry 後依然有錯誤時，Worker 就會停止，並且中止整個 Job。</p></blockquote>

<!--more-->


<h2>Master Actor</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>This Code is Form Let it Crash </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span>  <span class="nc">Master</span> <span class="nc">Actor</span><span class="err">，</span><span class="n">負責整個工作運作流程的</span> <span class="nc">Actor</span><span class="err">。</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">接收</span> <span class="nc">Job</span><span class="err">、</span><span class="n">分派</span> <span class="nc">Task</span> <span class="n">以及當發現</span> <span class="nc">Worker</span> <span class="nc">Terminal</span> <span class="n">或者是全部</span> <span class="nc">Task</span> <span class="n">都執行完畢之後</span><span class="err">。</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">將結果整理好之後回傳</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Master</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">results</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="nc">Int</span><span class="o">,</span> <span class="nc">Int</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">replyTo</span><span class="k">:</span> <span class="kt">ActorRef</span> <span class="o">=</span> <span class="k">_</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'> <span class="o">*</span>  <span class="nc">Router</span> <span class="n">這邊的</span> <span class="nc">Router</span> <span class="n">種類是使用</span> <span class="nc">RoundRobinRouter</span><span class="err">，</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">他會輪流將</span> <span class="nc">Message</span> <span class="n">傳給底下的</span> <span class="nc">Worker</span><span class="err">。</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">例如</span><span class="err">：</span><span class="n">若他底下有</span> <span class="mi">5</span> <span class="n">個</span> <span class="nc">Worker</span><span class="err">，</span><span class="n">那麼就會</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>     <span class="nc">Worker</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span>     <span class="nc">Worker</span> <span class="mi">2</span>
</span><span class='line'> <span class="o">*</span>     <span class="o">...</span>
</span><span class='line'> <span class="o">*</span>     <span class="nc">Worker</span> <span class="mi">5</span>
</span><span class='line'> <span class="o">*</span>     <span class="nc">Worker</span> <span class="mi">1</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span>  <span class="n">這樣的順序傳遞</span><span class="err">。</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">val</span> <span class="n">router</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Worker</span><span class="o">).&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">withRouter</span><span class="o">(</span><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span>
</span><span class='line'>  <span class="n">supervisorStrategy</span> <span class="k">=</span> <span class="nc">OneForOneStrategy</span><span class="o">(</span>
</span><span class='line'>    <span class="n">maxNrOfRetries</span> <span class="k">=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_:</span> <span class="kt">IOException</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Restart</span>
</span><span class='line'>    <span class="o">})),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;router&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">router</span> <span class="o">!</span> <span class="nc">CurrentRoutees</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nc">RouterRoutees</span><span class="o">(</span><span class="n">routees</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">routees</span> <span class="n">foreach</span> <span class="n">context</span><span class="o">.</span><span class="n">watch</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s">&quot;start&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">replyTo</span> <span class="k">=</span> <span class="n">sender</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">id</span> <span class="k">←</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">)</span> <span class="n">router</span> <span class="o">!</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="s">&quot;22&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">result</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">results</span> <span class="o">+=</span> <span class="o">(</span><span class="n">id</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">results</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)</span>
</span><span class='line'>    <span class="n">replyTo</span> <span class="o">!</span> <span class="n">results</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">sum</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">actor</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">replyTo</span> <span class="o">!</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Master Actor 的初始化</h3>

<p>上面的程式碼的註解有稍微介紹一下 Master 與 Router 的功能，這邊就針對程式碼的運作內容作些講解。</p>

<p>首先我們先看到這段程式碼</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">router</span> <span class="o">!</span> <span class="nc">CurrentRoutees</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>CurrentRoutess</strong> 這邊困擾了我一段時間，因為我在 Akka 的文件裡面並沒有看到這個物件的說明，且在 API Document 裡面我也沒有看到相關的介紹 Orz ...
一直到仔細看 receive 裡面的內容之後才發現，這程式碼的功能是發一個 Message 給 Router，Router 在接收到這個訊息之後，
就會將目前 Router 裡面的所有的 Worker Actor（在 Let it Crash 裡面稱他為 Routee） 用 RouterRoutees 這個 case class 包裝回傳。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="nc">RouterRoutees</span><span class="o">(</span><span class="n">routees</span><span class="o">)</span> <span class="o">=&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">routees</span> <span class="n">foreach</span> <span class="n">context</span><span class="o">.</span><span class="n">watch</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>之後就可以利用 context.watch 將這個 Worker Actor 註冊起來，這樣當 Worker Actor 因為錯誤太多次而結束的時候，就會接收到一個 Terminated 的 Message，
之後我們就回傳 -1 並且呼叫 context.stop(self) 結束 Master Actor，這也會連帶讓 Worker Actor 結束。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'>   <span class="k">case</span> <span class="nc">Terminated</span><span class="o">(</span><span class="n">actor</span><span class="o">)</span> <span class="o">=&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">replyTo</span> <span class="o">!</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="n">context</span><span class="o">.</span><span class="n">stop</span><span class="o">(</span><span class="n">self</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Master Actor 的 Scatter 與 Gather</h3>

<p>說到 Scatter 的部份的話我想應該就要介紹一下我們這邊使用的 Router 了。
Router 其實本身跟我們這邊所實做的 Master Actor 很像，透過 Router 就可以將訊息分派給他底下的 Actor ，他就有點像是仲介商一樣。
你把要做的工作交給他，他會負責找到合適的人將工作分派出去。</p>

<p>Router 分派工作的方式有好幾種，可以到 <a href="http://doc.akka.io/docs/akka/2.0/scala/routing.html">Router</a> 的文件看一下，這邊使用的是經典的 RoundRobinRouter。
他會將工作輪流 <strong>forward</strong> 給底下的 Actor，這邊會用到 forward 是因為在 Akka 裡面，當你傳送一個 Message 給某個 Actor 的時候，
其實還會附帶上了 Sender 的資訊，所以如果 Message 的傳送路徑是用一般的傳送方式的話</p>

<pre><code> Main -&gt; Router -&gt; Worker Actor
</code></pre>

<p>那麼 Worker Actor 的 Sender 就會變成 Router，所以 Router 所使用的傳遞方式是 forward，這樣 Worker Actor 接收到 Message 之後就還是會認為 Main 是 Sender。
這樣才能將訊息正確的回傳回去。</p>

<p>Scatter 的部份就這麼簡單解決，但是下一個 Gather 的部份就比較麻煩了，理由很簡單。因為 Router 只有負責分派的部份，Worker Actor 回傳的對象是一開始發 Message 的 Actor，
所以要另外針對回傳的 Message 作處理。下面的程式碼會在回傳的訊息累積到 10 個之後才將全部一起加總回傳。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">result</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span>
</span><span class='line'>   <span class="n">results</span> <span class="o">+=</span> <span class="o">(</span><span class="n">id</span> <span class="o">-&gt;</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">results</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">10</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">replyTo</span> <span class="o">!</span> <span class="n">results</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">sum</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但是很明顯的，這樣還不足夠，如果同時間 Master Actor 接收到多個 Job，那麼要如何分辨 Worker Actor 所回傳的 Result 是哪個 Job 的？
目前想到的解決方式有</p>

<ol>
<li>簡單來說就是限制讓一個 Master Actor 同時只會有一個 Job 進行，如果有多個 Job 要進行就使用多個 Master Actor，附帶一題Actor 的數量並不代表 Thread 的數量，這部份可以透過 Dispatcher 的設定來控制。</li>
<li>增加 Job ID，讓每個 Job 都有自己的 ID，並且這個 ID 也會加在 Result 裡面，這樣就可以辨識 Result 是哪個 Job的了。</li>
</ol>


<p>本來我覺得第一個方法是不可行的，因為這樣太浪費資源且每次都要建立 Master Actor 很麻煩。
但是這樣的作法很單純也很好擴充，反正只要增加 Master Actor 就能多處理幾個 Job，要管理資源就等於管理 Master Actor 的數量就好了。</p>

<p>第二種作法會增加整個程式的複雜度，因為需要多一個 Map 來暫存 Result（光這個就有點麻煩了），需要多傳遞 Job ID 的資訊等。但好處應該就是會比較節省記憶體與 CPU 等。</p>

<p>但是在這個 CPU、Memory 不值錢的年代且這個又只是我的玩具的，所以我會選擇第一種方式來實做。</p>

<h2>Worker Actor</h2>

<p>這是在 Let it Crash 裡面 Worker Actor 的程式碼，他接收的 Message 型態很簡單只有一種 (id,s:String)，這是在 Scala 稱之為 Tuple 的物件。
會有兩種是因為這個範例會模擬當 Worker Actor 執行發生 Exception 的情況。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>This code is from Let it Crash </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">Worker</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">if</span> <span class="nc">Random</span><span class="o">.</span><span class="n">nextInt</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nc">IOException</span><span class="o">(</span><span class="s">&quot;failed&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">case</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">s</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">sender</span> <span class="o">!</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">override</span> <span class="k">def</span> <span class="n">preRestart</span><span class="o">(&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">reason</span><span class="k">:</span> <span class="kt">Throwable</span><span class="o">,</span> <span class="n">message</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Any</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'><span class="c1">// retry</span>
</span><span class='line'><span class="n">message</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">self</span> <span class="n">forward</span> <span class="k">_</span> <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>比較有趣的是 preRestart ，這可以跟前面 Master Actor 內的 Router 一起看一下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">router</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Worker</span><span class="o">).&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">withRouter</span><span class="o">(</span>
</span><span class='line'><span class="nc">RoundRobinRouter</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span>
</span><span class='line'>  <span class="n">supervisorStrategy</span> <span class="k">=</span> <span class="nc">OneForOneStrategy</span><span class="o">(</span>
</span><span class='line'>    <span class="n">maxNrOfRetries</span> <span class="k">=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_:</span> <span class="kt">IOException</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nc">Restart</span>
</span><span class='line'>    <span class="o">})),</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;router&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面的 OneForOneStrategy 是 Akka 的特產，他可以設定 Supervisor（就是該 Actor 的管理者，例如 Worker Actor 的 supervisor 是 Router）
對於他底下 Actor 的應對策略。這邊是設定當 Worker Actor 有丟出 IOException 的時候，所採取的應對是將該 Worker Actor Restart。
但是這個 restart 次數有限制，在 maxNrOfRetries = 2 ，因此 Worker Actor 最多只會 Restart 兩次，兩次之後就會被停止並且傳一個 Terminated 的訊息給 Master Actor。</p>

<p>而 preRestart 裡面做的事情就是就是在 Restart 前將目前的 Message 全部用 forward 的方式傳給自己一次，否則 Restart 後這些 message 就會被清理掉。
這樣之前的工作就會遺失了。</p>

<p>Let it Crash 的 <a href="http://letitcrash.com/post/23532935686/watch-the-routees">Watch the Routees</a> 幫助真的很大，加上最近再看 <a href="http://www.amazon.com/Scala-Depth-Joshua-Suereth-D/dp/1935182706">Scala in Depth</a> 對於要做的 Scatter-Gather 比較有一些想法了，
下一篇應該就會說明如何時做的。</p>

<h1>下集預告?</h1>

<p><img src="https://dl.dropbox.com/u/15537823/Blog/Akka%202.0%20%E7%AD%86%E8%A8%98%285%29%20-%20Scatter%20Gather/Photo%2012-6-16%20%E4%B8%8B%E5%8D%8810%2042%2021.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka 2.0 筆記(4) - Dataflow 請不要期待這篇我會提到什麼]]></title>
    <link href="http://Swind.github.com/blog/2012/06/12/akka-dataflow/"/>
    <updated>2012-06-12T21:55:00+08:00</updated>
    <id>http://Swind.github.com/blog/2012/06/12/akka-dataflow</id>
    <content type="html"><![CDATA[<h1>因為我也看不懂 Orz ...</h1>

<p>這整篇的原因起於，洗澡的時候想到的，
Akka 的 Future 到底有沒有存在的意義呢？</p>

<p>因為當一個 Actor 用 reply 或者 sender 回傳結果的時候，其實可以再 receive 不同的型態的 Message 就好了。
而且這樣還不會因為 Await 而需要 block thread，減少 dead lock 的發生。
我之前就幹過很蠢的事情，因為 Actor 把 Thread Pool 裡面的 Thread 用光了，所以他底下幫他工作的 Actor 就取不到 Thread 可以執行，
因此全部 Timeout Orz ...</p>

<p>目前唯一能想到的用法就是在發出訊息的地方不是一個 Actor 的時候，這時候就沒有 receive 可以接收結果了。
所以需要使用 Future 來等待結果，也就是 Future 應該只被用在需要等待的時候，如果是在一個 Actor 被執行的時候使用 Future。
很容易浪費掉一個 Thread，應該是要另外開一個新的 case class 來專門處理結果才是。</p>

<p>但是這邊又出現了一個更複雜的問題了，因為我將工作分給不同的 Actor 去執行，必須要等到所有 Actor 都執行完畢，整合所有的結果。
那麼如果是用 receive 我要怎樣才能知道我所有的工作都已經完成了呢？</p>

<p>簡單來說，我就是需要實做一個 <a href="http://www.eaipatterns.com/BroadcastAggregate.html">Scatter-Gather</a>，才會莫名其妙的看到 Akka 的 Dataflow。</p>

<!--more-->


<h2>Akka Dataflow</h2>

<p>起因在於我用 Scatter-Gather 與 Akka 搜尋文章的時候找到這篇 <a href="http://blog.vasilrem.com/scatter-gather-with-akka-dataflow">Scatter-Gather with Akka Dataflow</a>。
一看裡面的 Code 真是驚為天人，我一行都看不懂 Orz ...</p>

<p>然後 Akka <a href="http://doc.akka.io/docs/akka/2.0/scala/dataflow.html">Dataflow Concurrency</a> 的內容又非常的精簡 Orz，而且他又用到了 <a href="http://www.scala-lang.org/node/2096">Scala Continuations</a>，
這東西的文件也非常的 Orz，連 Programming in Scala 2nd 都沒有提到這個東西，讓我完全放棄這個東西 Orz ..</p>

<p>但是找到都找到了，我想實做個標本出來也不錯，所以才會有這篇東西。</p>

<p>下面這個版本改自上面所提到的 <a href="http://blog.vasilrem.com/scatter-gather-with-akka-dataflow">Scatter-Gather with Akka Dataflow</a></p>

<p>因為那個 Blog 的範例我估計來自於 Akka 1.3.1 之前的版本，所以我做了一些更動才能在 Akka 2.0 上面跑。</p>

<p>很幸運或者是很不幸的是 Dataflow 的部份則是從 Akka 1.x 就沒有變動過了，所以基本邏輯都沒有改變。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>This code is from Dataflow Concurrency - software anatomy </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.util.continuations._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">akka.actor.Actor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorRef</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.Props</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.dispatch.Future.flow</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.dispatch.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.pattern.ask</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.duration.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.Timeout</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">object</span> <span class="nc">ScatterGatherDataFlow</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span><span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">10</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">recipients</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">5</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">i</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Recipient</span><span class="o">(</span><span class="n">i</span><span class="o">))))</span>
</span><span class='line'><span class="k">val</span> <span class="n">aggregator</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">Props</span><span class="o">(</span><span class="k">new</span> <span class="nc">Aggregator</span><span class="o">(</span><span class="n">recipients</span><span class="o">)))</span>
</span><span class='line'><span class="k">val</span> <span class="n">results1</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">aggregator</span> <span class="o">?</span> <span class="nc">Message</span><span class="o">(</span><span class="s">&quot;Hello&quot;</span><span class="o">),</span> <span class="n">timeout</span><span class="o">.</span><span class="n">duration</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">results2</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">aggregator</span> <span class="o">?</span> <span class="nc">Message</span><span class="o">(</span><span class="s">&quot;World&quot;</span><span class="o">),</span> <span class="n">timeout</span><span class="o">.</span><span class="n">duration</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">results1</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="n">map</span> <span class="o">{</span> <span class="n">res</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Result: %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">res</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">results2</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]]</span> <span class="n">map</span> <span class="o">{</span> <span class="n">res</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Result: %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">res</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">system</span><span class="o">.</span><span class="n">awaitTermination</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Aggregator</span><span class="o">(</span><span class="n">recipients</span><span class="k">:</span> <span class="kt">Iterable</span><span class="o">[</span><span class="kt">ActorRef</span><span class="o">])</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">defaultDispatcher</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">10</span> <span class="n">seconds</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="n">msg</span> <span class="k">@</span> <span class="nc">Message</span><span class="o">(</span><span class="n">text</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Started processing message `%s`&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">text</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Promise</span><span class="o">[</span><span class="kt">String</span><span class="o">]()</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">promises</span> <span class="k">=</span> <span class="nc">List</span><span class="o">.</span><span class="n">fill</span><span class="o">(</span><span class="n">recipients</span><span class="o">.</span><span class="n">size</span><span class="o">)(</span><span class="nc">Promise</span><span class="o">[</span><span class="kt">String</span><span class="o">]())</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">recipients</span><span class="o">.</span><span class="n">zip</span><span class="o">(</span><span class="n">promises</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="o">(</span><span class="n">recipient</span><span class="o">,</span> <span class="n">promise</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">recipient</span> <span class="o">?</span> <span class="n">msg</span><span class="o">).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="n">map</span> <span class="o">{</span> <span class="n">result</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>        <span class="n">println</span><span class="o">(</span><span class="s">&quot;Binding recipient&#39;s response: %s&quot;</span> <span class="n">format</span> <span class="o">(</span><span class="n">result</span><span class="o">))</span>
</span><span class='line'>        <span class="n">flow</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">promise</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">result</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">flow</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">def</span> <span class="n">gather</span><span class="o">(</span><span class="n">promises</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">String</span><span class="o">]],</span> <span class="n">result</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="kt">@cps</span><span class="o">[</span><span class="kt">Future</span><span class="o">[</span><span class="kt">Any</span><span class="o">]]</span> <span class="k">=</span>
</span><span class='line'>        <span class="n">promises</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">case</span> <span class="n">head</span> <span class="o">::</span> <span class="n">tail</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">gather</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="n">head</span><span class="o">()</span> <span class="o">+</span> <span class="n">result</span><span class="o">)</span>
</span><span class='line'>          <span class="k">case</span> <span class="nc">Nil</span>          <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Binding result...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">gather</span><span class="o">(</span><span class="n">promises</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sender</span> <span class="o">!</span> <span class="n">result</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Recipient</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Actor</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">receive</span> <span class="k">=</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nc">Message</span><span class="o">(</span><span class="n">msg</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>
</span><span class='line'>  <span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">)</span>
</span><span class='line'>  <span class="n">sender</span> <span class="o">!</span> <span class="o">(</span><span class="s">&quot;%s, [%s]! &quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">msg</span><span class="o">,</span> <span class="n">id</span><span class="o">))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">case</span> <span class="k">class</span> <span class="nc">Message</span><span class="o">(</span><span class="n">text</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>附上執行結果</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Started processing message &lt;code>Hello&lt;/code>
</span><span class='line'>Started processing message &lt;code>World&lt;/code>
</span><span class='line'>Binding result...
</span><span class='line'>Binding result...
</span><span class='line'>Binding recipient's response: Hello, [1]!
</span><span class='line'>Binding recipient's response: Hello, [2]!
</span><span class='line'>Binding recipient's response: Hello, [3]!
</span><span class='line'>Binding recipient's response: Hello, [4]!
</span><span class='line'>Binding recipient's response: Hello, [5]!
</span><span class='line'>Result: Hello, [5]! Hello, [4]! Hello, [3]! Hello, [2]! Hello, [1]!
</span><span class='line'>Binding recipient's response: World, [2]!
</span><span class='line'>Binding recipient's response: World, [1]!
</span><span class='line'>Binding recipient's response: World, [3]!
</span><span class='line'>Binding recipient's response: World, [4]!
</span><span class='line'>Binding recipient's response: World, [5]!
</span><span class='line'>Result: World, [5]! World, [4]! World, [3]! World, [2]! World, [1]!</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我目前只有做到將這段程式碼修改到可以動而已，實際整個運作流程與大概還不是完全了解。
一方面是因為有關於 Dataflow 的資料太少，二來是 Scala Continuations 的資料也很少 Orz 。
並且這個功能我覺得不太好 Debug ，閱讀上也有點不習慣，因此不會採用這個方式。
或許有一天我了解了 Dataflow 的好的時候我會在回頭把這程式碼的說明補齊。</p>

<h2>Eclipse 與 Sbt 的設定</h2>

<p>上面這段程式碼由於有用到 <a href="http://www.scala-lang.org/node/2096">Scala Continuations</a> 所以 Eclipse 或者 sbt 需要作一些設定，讓他可以使用 scala 的 continuations plugin。</p>

<p>Eclipse 的部份需要在 Compiler Standard 的設定中 p 的部份增加 <strong>continuations:enable</strong></p>

<p><img src="https://dl.dropbox.com/u/15537823/Blog/2012-06-12-akka-dataflow/ScalaEclipse_continuations.png"></p>

<p>在 Compiler Advanced 的設定中 Xplugin 增加 <strong>lib\continuations.jar</strong></p>

<p><img src="https://dl.dropbox.com/u/15537823/Blog/2012-06-12-akka-dataflow/ScalaEclipse_continuations_2.png"></p>

<p>如果是 sbt 的話只要增加下面的內容到 <strong>build.sbt</strong> 裡面即可。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">autoCompilerPlugins</span> <span class="o">:=</span> <span class="kc">true</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">libraryDependencies</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;+=</span> <span class="n">scalaVersion</span> <span class="o">{</span> <span class="n">v</span> <span class="k">=&gt;</span> <span class="n">compilerPlugin</span><span class="o">(</span><span class="s">&quot;org.scala-lang.plugins&quot;</span> <span class="o">%</span> <span class="s">&quot;continuations&quot;</span> <span class="o">%</span> <span class="s">&quot;2.9.1&quot;</span><span class="o">)</span> <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scalacOptions</span> <span class="o">+=</span> <span class="s">&quot;-P:continuations:enable&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka 2.0 筆記(3) - Future 之實在不是我想要拖稿]]></title>
    <link href="http://Swind.github.com/blog/2012/06/10/akka-note-3-future/"/>
    <updated>2012-06-10T17:30:00+08:00</updated>
    <id>http://Swind.github.com/blog/2012/06/10/akka-note-3-future</id>
    <content type="html"><![CDATA[<p>而是我實在是不擅長寫作，過去作文只有 20 分真的不是拿假的。
前一篇的 <strong>開始使用 Future</strong> 只有介紹一些基本的使用方式而已，然後依照前面的程式碼是絕對跑不起來的 Orz ...</p>

<p>原因在於 Future 需要一個 Execution Contexts 類似 Java 裡面的 Executor，也就是 Thread Pool。</p>

<!--more-->


<h2>Execution Contexts</h2>

<p>因為 Future 除了跟 Actor 配合使用之外，也可以直接使用。</p>

<p>例如前面與 Actor 配合使用的例子</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;Tony&amp;quot;,&amp;quot;Lion&amp;quot;,&amp;quot;Teddy&amp;quot;,&amp;quot;Brain&amp;quot;,&amp;quot;Jess&amp;quot;,&amp;quot;Kay&amp;quot;,&amp;quot;Michael&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">val</span> <span class="n">listOfFutures</span> <span class="k">=</span> <span class="n">list</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">name</span> <span class="o">=&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="o">(</span><span class="n">countActor</span> <span class="o">?</span> <span class="n">name</span><span class="o">).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="k">val</span> <span class="n">futureList</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">listOfFutures</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其實可以改成這樣:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">futureList</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">name</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="n">length</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這樣的結果也是會回傳一個 Future[List[Int]]。
很明顯的這樣的作法簡單很多，因為少建立 Actor 也不需要再將 Actor 所回傳的值轉型（就是前面看到的 mapTo[Int]）。
我是還蠻喜歡這樣做的，不過由於後面要使用到 Router 所以就沒有直接使用 Future 了。</p>

<p>所以必需要讓 Future 知道他有哪個 ExecutionContext 可以讓他使用以便執行工作。
雖然文件中有提到如果 scope 內存在 ActorSystem ，他會自己使用 ActorSystem 的 default dispatcher，
不過很可惜的這個功能我沒有測試出來，不然就是我誤解了這段話的意思。
如果有朝一日我突然開悟想通了再來補上這一段。</p>

<p>而在 Akka 裡面所有的 Dispatcher 都是繼承自 ExecutionContext
所以要設定這個也不太花時間。</p>

<p>如果要使用 Future 的是一個 Actor，那麼只要直接設定 Actor 的 dispatcher 就可以了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">MyActor</span> <span class="k">extends</span> <span class="nc">Actor</span><span class="o">{</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">defaultDispatch</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>至於為什麼要使用 implicit 呢？因為 Future 的 Function 中 dispatcher 都是用 implicit 的型態，
所以如果沒有傳參數給他的時候，他會自動在這個 scope 裡面找尋是否有宣告成 implicit 的 ExecutionContext 變數。</p>

<p>如果使用 Future 的地方不是在 Actor 內，或不想使用 Actor 的 dispatch。那麼可以自己建立 Java 的 Executor ，並且將他轉成 ExecutionContext。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">es</span> <span class="k">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="n">newFixedThreadPool</span><span class="o">(</span><span class="n">threadSize</span><span class="o">)</span>             <span class="c1">//Java Executor</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="nc">ExecutionContext</span><span class="o">.</span><span class="n">fromExecutorService</span><span class="o">(</span><span class="n">es</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這樣在使用 Future 的時候他就會自動去找 ExecutionContext 來執行。</p>

<h2>如果 Future 執行的過程中有發生 Exception</h2>

<p>Future 用 <strong>recover</strong> 與 <strong>recoverWith</strong> 來處理 Future 執行過程中的所丟出的 Exception。</p>

<p>使用方式非常的簡單，寫起來也蠻漂亮的，只要在建立 Future 時使用 recover 或 recoverWith 並且加入要處理的例外就好了。</p>

<p>例如</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">Future</span><span class="o">(</span><span class="n">parsePage</span><span class="o">(</span><span class="n">pageNumber</span><span class="o">))</span> <span class="n">recover</span> <span class="o">{</span> <span class="k">case</span> <span class="n">e</span><span class="k">:</span><span class="kt">Exception</span> <span class="o">=&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="nc">Post</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面表示當我執行 parsePage 時如果發生任何 Excetpion 那麼就回傳一個空的 list。</p>

<p>而 recover 與 recoverWith 的差別就在於，recoverWith 內的 Function 要回傳的型態是 Future[Int] 而 recover 則是 Int。</p>

<p>晚點整理一個使用 Future 的完整例子好了，現在寫的東西真的太不入流了 XDDDDDD
我很難把程式碼直接貼上來當範例。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Akka 2.0 筆記 (2) - 開始使用 Future]]></title>
    <link href="http://Swind.github.com/blog/2012/06/08/akka-note-2-eventstream/"/>
    <updated>2012-06-08T12:18:00+08:00</updated>
    <id>http://Swind.github.com/blog/2012/06/08/akka-note-2-eventstream</id>
    <content type="html"><![CDATA[<p>以前再使用 Java Thread 的時候最困擾我的就是 Thread 之間的溝通。
要怎樣讓一個 Thread 去等待另外一個 Thread？要怎樣才能讓工作分配的平均？
最後是靠 BlockingQueue 才讓實作變得簡單一點，
不過想當然問題當然一大堆 ... Orz</p>

<p>所以想來實驗看看 Akka 的 Future 與 Router 到底是如何使用，與可以做到什麼事情。</p>

<!--more-->


<h2>Future</h2>

<p>請搭配 Akka 官網 <a href="http://doc.akka.io/docs/akka/2.0/scala/futures.html">Future</a> 服用。</p>

<p>看 Future 一定要看一下文件第一句話</p>

<p><blockquote><p>In Akka, a Future is a data structure used to retrieve the result of some concurrent operation.</p></blockquote></p>

<p>是的，他只是一個 Data Structure 而已，<strong>Future 最主要的功能就是可以透過他取得 Actor 回傳的 message。</strong>
也可以將他想成他代表我們未來會取得的回傳值，我想這也就是它叫做 Future 的原因了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">5</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">future</span> <span class="k">=</span> <span class="n">actor</span> <span class="o">?</span> <span class="n">msg</span> <span class="c1">// enabled by the &quot;ask&quot; import</span>
</span><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">future</span><span class="o">,</span> <span class="n">timeout</span><span class="o">.</span><span class="n">duration</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>偷一下官網的範例，我們一行一行看上面的程式碼。</p>

<p>一開始的</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">5</span> <span class="n">seconds</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>就先忽略 implicit 吧，因為這邊還沒有用到 implicit 的特性，現在只要知道他建立了一個 Timeout 物件，內容是 5 seconds。
這個在之後設定 wait timeout 的時候會用到‧為了避免無止盡的等待，在 Actor 裡面只要有關等待的操作都要給一個 Timeout 時間。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">future</span> <span class="k">=</span> <span class="n">actor</span> <span class="o">?</span> <span class="n">msg</span> <span class="c1">// enabled by the &quot;ask&quot; import</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這裡發一個 msg 給 actor ，特別需要注意的地方是這裡不是使用<strong> ! </strong>而是<strong> ? </strong>。
要使用這個 ? 需要 <strong>import akka.pattern.ask</strong>，跟 ! 不一樣的地方在於他會回傳一個 Future[Any] 物件</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">future</span><span class="o">,</span><span class="n">timeout</span><span class="o">.</span><span class="n">duration</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最後使用 Await 來透過 Future 取得 Actor 的回傳值，並且設定一個 timeout 時間，如果時間到 Actor 沒有回傳任何東西的話，就會丟出一個 Timeout Exception。</p>

<h3>如果要等待很多個 Actor 回傳值呢？</h3>

<p>如果要將工作分派給多個 Actor 進行運作，那麼最直覺的想法就是</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">f1</span> <span class="k">=</span> <span class="n">actor1</span> <span class="o">?</span> <span class="n">msg1</span>
</span><span class='line'><span class="k">val</span> <span class="n">f2</span> <span class="k">=</span> <span class="n">actor2</span> <span class="o">?</span> <span class="n">msg2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">a</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f1</span><span class="o">,</span> <span class="mi">1</span> <span class="n">second</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'><span class="k">val</span> <span class="n">b</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f2</span><span class="o">,</span> <span class="mi">1</span> <span class="n">second</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Int</span><span class="o">]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">f3</span> <span class="k">=</span> <span class="n">actor3</span> <span class="o">?</span> <span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">f3</span><span class="o">,</span> <span class="mi">1</span> <span class="n">second</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我先將工作發給 actor1 等他回傳，然後再發給 actor2 等待回傳，最後在將回傳結果發給 actor3。</p>

<p>為了要取得 a、b 而使用了 Await 兩次，這樣的作法非常沒有效率，因此有了 sequence 與 traverse 這兩個 function。</p>

<p>舉例來說，如果我有一個</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">List</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;Tony&amp;quot;,&amp;quot;Lion&amp;quot;,&amp;quot;Teddy&amp;quot;,&amp;quot;Brain&amp;quot;,&amp;quot;Jess&amp;quot;,&amp;quot;Kay&amp;quot;,&amp;quot;Michael&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>並且想要這個 List 內所有字串的長度總和。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">List</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span> <span class="n">title</span><span class="o">=</span><span class="s">&quot;Tony&amp;quot;,&amp;quot;Lion&amp;quot;,&amp;quot;Teddy&amp;quot;,&amp;quot;Brain&amp;quot;,&amp;quot;Jess&amp;quot;,&amp;quot;Kay&amp;quot;,&amp;quot;Michael&quot;</span><span class="o">&gt;</span><span class="nc">String</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">val</span> <span class="n">listOfFutures</span> <span class="k">=</span> <span class="n">list</span> <span class="n">map</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">name</span> <span class="o">=&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="o">(</span><span class="n">countActor</span> <span class="o">?</span> <span class="n">name</span><span class="o">).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在這邊我們得到了一個型態為 List[Future[Int]] 的 listOfFutures，再來就可以使用 sequence 將其轉成 Future[List[Int]]
最後就可以使用 Await 來取得所有字串長度了，並且統計字數了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">futureList</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">(</span><span class="n">listOfFutures</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">lengthList</span> <span class="k">=</span> <span class="nc">Await</span><span class="o">.</span><span class="n">result</span><span class="o">(</span><span class="n">futureList</span><span class="o">,</span><span class="mi">1</span> <span class="n">second</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>而 sequence 與 traverse 兩個不一樣的地方在於說</p>

<p>sequence 接受一個 List[Future[A]] 轉成 Future[List[A]]。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">futureList</span><span class="k">:</span><span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">sequence</span><span class="o">((</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span><span class="k">=&gt;</span><span class="nc">Future</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>而 traverse 則是接受一個 List[B] 與一個 function (B=>Future[A]) 最後也是產生 Future[List[A]]</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">futureList</span><span class="k">:</span><span class="kt">Future</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="nc">Future</span><span class="o">.</span><span class="n">traverse</span><span class="o">((</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">100</span><span class="o">).</span><span class="n">toList</span><span class="o">)(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>用 traverse 的好處在於少產生了中間過程的 List[Future[Int]] (至少我們的程式碼看不到，背後實際上有沒有我就不確定了，不過文件是這樣說的)，而直接產生了 Future[List[Int]]。</p>

<p>寫了這麼久，才寫這麼一點點 Orz ... 而且還完全沒有進入重點。</p>
]]></content>
  </entry>
  
</feed>
